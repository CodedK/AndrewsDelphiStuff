unit NewLibrary_Intf;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, TypInfo,
  {RemObjects:} uROXMLIntf, uROClasses, uROClient, uROTypes, uROClientIntf;

const
  //RBK modification: storing timestamp of generation, to be able to check version mismatch between client and server
  //RBK modification, done in: "\Lib\Componenten\RemObjects SDK for Delphi\Source\CodeGen\uRODLToPascalIntf.pas"
  C_GenerateDateTime = '12-07-2012 20:11:09:357 by amussche';

const
  { Library ID }
  LibraryUID = '{6BAEA71C-1331-4683-A563-7BFB47D02C65}';
  TargetNamespace = '';

  { Service Interface ID's }
  INewService_IID : TGUID = '{ABFB312B-B427-4A77-BD7E-830C192ED62B}';

  { Event ID's }
  EID_NewEventSink = 'NewEventSink';

type
  TSeekOrigin = Classes.TSeekOrigin; // fake declaration
  { Forward declarations }
  INewService = interface;

  INewEventSink = interface;


  { INewService }
  INewService = interface
    ['{ABFB312B-B427-4A77-BD7E-830C192ED62B}']
    function Sum(const A: Integer; const B: Integer): Integer;
    function GetServerTime: DateTime;
    procedure StartTimer;
    procedure StopTimer;
    procedure ExecuteLongStatementWithProgress;
  end;

  { CoNewService }
  CoNewService = class
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): INewService;
  end;

  { TNewService_Proxy }
  TNewService_Proxy = class(TROProxy, INewService)
  protected
    function __GetInterfaceName:string; override;

    function Sum(const A: Integer; const B: Integer): Integer;
    function GetServerTime: DateTime;
    procedure StartTimer;
    procedure StopTimer;
    procedure ExecuteLongStatementWithProgress;
  end;

  { INewEventSink }
  INewEventSink = interface
    ['{B9022064-A9F0-4226-930B-A8EC3CD5F596}']
    procedure NewMethod(const NewParam: AnsiString);
    procedure ProgressEvent(const aProgress: Integer; const aMax: Integer);
    procedure TimerEvent(const aTime: DateTime);
  end;

  { INewEventSink_Writer }
  INewEventSink_Writer = interface(IROEventWriter)
    ['{B9022064-A9F0-4226-930B-A8EC3CD5F596}']
    procedure NewMethod(const __Sender : TGUID; const NewParam: AnsiString);
    procedure ProgressEvent(const __Sender : TGUID; const aProgress: Integer; const aMax: Integer);
    procedure TimerEvent(const __Sender : TGUID; const aTime: DateTime);
  end;

implementation

uses
  {vcl:} SysUtils,
  {RemObjects:} uROEventRepository, uROSerializer, uRORes;

{ CoNewService }

class function CoNewService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): INewService;
begin
  Result := TNewService_Proxy.Create(aMessage, aTransportChannel);
end;

{ TNewService_Proxy }

function TNewService_Proxy.__GetInterfaceName:string;
begin
  Result := 'NewService';
end;

function TNewService_Proxy.Sum(const A: Integer; const B: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'Sum');
    lMessage.Write('A', TypeInfo(Integer), A, []);
    lMessage.Write('B', TypeInfo(Integer), B, []);
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', TypeInfo(Integer), Result, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TNewService_Proxy.GetServerTime: DateTime;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'GetServerTime');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', TypeInfo(DateTime), Result, [paIsDateTime]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TNewService_Proxy.StartTimer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'StartTimer');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TNewService_Proxy.StopTimer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'StopTimer');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TNewService_Proxy.ExecuteLongStatementWithProgress;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage;
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'NewLibrary', __InterfaceName, 'ExecuteLongStatementWithProgress');
    lMessage.Finalize;

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream;
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

type
  { TNewEventSink_Writer }
  TNewEventSink_Writer = class(TROEventWriter, INewEventSink_Writer)
  protected
    procedure NewMethod(const __Sender : TGUID; const NewParam: AnsiString);
    procedure ProgressEvent(const __Sender : TGUID; const aProgress: Integer; const aMax: Integer);
    procedure TimerEvent(const __Sender : TGUID; const aTime: DateTime);
  end;

procedure TNewEventSink_Writer.NewMethod(const __Sender : TGUID; const NewParam: AnsiString);
var
  __eventdata : Binary;
  lMessage : IROMessage;
begin
  __eventdata := Binary.Create;
  lMessage := __Message;
  try
    lMessage.InitializeEventMessage(NIL, 'NewLibrary', EID_NewEventSink, 'NewMethod');
    lMessage.Write('NewParam', TypeInfo(AnsiString), NewParam, []);
    lMessage.Finalize;

    lMessage.WriteToStream(__eventdata);

    Repository.StoreEventData(__Sender, __eventdata, ExcludeSender, ExcludeSessionList, SessionList.CommaText, EID_NewEventSink);
  finally
    __eventdata.Free;
    lMessage := nil;
  end;
end;

procedure TNewEventSink_Writer.ProgressEvent(const __Sender : TGUID; const aProgress: Integer; const aMax: Integer);
var
  __eventdata : Binary;
  lMessage : IROMessage;
begin
  __eventdata := Binary.Create;
  lMessage := __Message;
  try
    lMessage.InitializeEventMessage(NIL, 'NewLibrary', EID_NewEventSink, 'ProgressEvent');
    lMessage.Write('aProgress', TypeInfo(Integer), aProgress, []);
    lMessage.Write('aMax', TypeInfo(Integer), aMax, []);
    lMessage.Finalize;

    lMessage.WriteToStream(__eventdata);

    Repository.StoreEventData(__Sender, __eventdata, ExcludeSender, ExcludeSessionList, SessionList.CommaText, EID_NewEventSink);
  finally
    __eventdata.Free;
    lMessage := nil;
  end;
end;

procedure TNewEventSink_Writer.TimerEvent(const __Sender : TGUID; const aTime: DateTime);
var
  __eventdata : Binary;
  lMessage : IROMessage;
begin
  __eventdata := Binary.Create;
  lMessage := __Message;
  try
    lMessage.InitializeEventMessage(NIL, 'NewLibrary', EID_NewEventSink, 'TimerEvent');
    lMessage.Write('aTime', TypeInfo(DateTime), aTime, []);
    lMessage.Finalize;

    lMessage.WriteToStream(__eventdata);

    Repository.StoreEventData(__Sender, __eventdata, ExcludeSender, ExcludeSessionList, SessionList.CommaText, EID_NewEventSink);
  finally
    __eventdata.Free;
    lMessage := nil;
  end;
end;

type
  { TNewEventSink_Invoker }
  TNewEventSink_Invoker = class(TROEventInvoker)
  published
    procedure Invoke_NewMethod(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
    procedure Invoke_ProgressEvent(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
    procedure Invoke_TimerEvent(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
  end;

procedure TNewEventSink_Invoker.Invoke_NewMethod(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
var
  NewParam: AnsiString;
begin

    __Message.Read('NewParam', TypeInfo(AnsiString), NewParam, []);

    (__Target as INewEventSink).NewMethod(NewParam);

end;

procedure TNewEventSink_Invoker.Invoke_ProgressEvent(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
var
  aProgress: Integer;
  aMax: Integer;
begin

    __Message.Read('aProgress', TypeInfo(Integer), aProgress, []);
    __Message.Read('aMax', TypeInfo(Integer), aMax, []);

    (__Target as INewEventSink).ProgressEvent(aProgress, aMax);

end;

procedure TNewEventSink_Invoker.Invoke_TimerEvent(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
var
  aTime: DateTime;
begin

    __Message.Read('aTime', TypeInfo(DateTime), aTime, []);

    (__Target as INewEventSink).TimerEvent(aTime);

end;

initialization
  RegisterProxyClass(INewService_IID, TNewService_Proxy);

  RegisterEventWriterClass(INewEventSink_Writer, TNewEventSink_Writer);
  RegisterEventInvokerClass(EID_NewEventSink, TNewEventSink_Invoker);

finalization
  UnregisterProxyClass(INewService_IID);

  UnregisterEventWriterClass(INewEventSink_Writer);
  UnregisterEventInvokerClass(EID_NewEventSink);

end.
