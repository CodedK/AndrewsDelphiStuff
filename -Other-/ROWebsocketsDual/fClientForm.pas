unit fClientForm;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, StdCtrls,
  uROClient, uROClientIntf, uRORemoteService, uROJSONMessage, uROIndyTCPChannel, ComCtrls,
  NewLibrary_Intf, uROAsync, uROBaseHTTPClient,
  uROIndyHTTPWebsocketChannel,
  uROIndyHTTPChannel, uROEventRepository, uROBinMessage;

type
  TClientForm = class(TForm,
                      INewEventSink)
    ROMessage: TROJSONMessage;
    ROChannel: TROIndyTCPChannel;
    RORemoteService: TRORemoteService;
    Button1: TButton;
    btnServertime: TButton;
    ProgressBar1: TProgressBar;
    ROIndyHTTPChannel1: TROIndyHTTPChannel;
    ROEventReceiver1: TROEventReceiver;
    ROBinMessage1: TROBinMessage;
    Button3: TButton;
    Button4: TButton;
    Button2: TButton;
    procedure Button1Click(Sender: TObject);
    procedure btnServertimeClick(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
  private
    FROIndyHTTPChannel_Websocket: TROIndyHTTPWebsocketChannel;
  protected
    {INewEventSink}
    procedure NewMethod(const NewParam: AnsiString);
    procedure ProgressEvent(const aProgress: Integer; const aMax: Integer);
    procedure TimerEvent(const aTime: DateTime);
  public
    procedure AfterConstruction; override;
  end;

var
  ClientForm: TClientForm;

implementation

uses
  IdHTTP, IdIOHandlerWebsocket, NewLibrary_Async;

{
  The unit NewLibrary_Intf.pas will be generated by the RemObjects preprocessor the first time you
  compile your server application. Make sure to do that before trying to compile the client.

  To invoke your server simply typecast your server to the name of the service interface like this:

      (RORemoteService as INewService).Sum(1,2)
}

{$R *.dfm}

procedure TClientForm.Button1Click(Sender: TObject);
var
  i: Integer;
begin
  try
    i := (RORemoteService as INewService).Sum(1,2);
    ShowMessage('Sum of 1 and 2 is: ' + IntToStr(i));
  except
    on e:exception do
      ShowMessage(e.message);
  end;
end;

procedure TClientForm.Button2Click(Sender: TObject);
begin
  if FROIndyHTTPChannel_Websocket <> nil then
  begin
    with (FROIndyHTTPChannel_Websocket.IndyClient.IOHandler as TIdIOHandlerWebsocket) do
    begin
      CloseCode   := C_FrameClose_Normal;
      CloseReason := 'Test close';
      Close;
    end;
  end;
end;

var
  async: INewService_Async;

procedure TClientForm.Button3Click(Sender: TObject);
begin
  async := CoNewService_Async.Create(Self.ROBinMessage1, FROIndyHTTPChannel_Websocket);
  async.Invoke_ExecuteLongStatementWithProgress;
end;

procedure TClientForm.Button4Click(Sender: TObject);
begin
  (RORemoteService as INewService).StartTimer;
end;

procedure TClientForm.NewMethod(const NewParam: AnsiString);
begin
  ShowMessage(string(NewParam));
end;

procedure TClientForm.ProgressEvent(const aProgress, aMax: Integer);
begin
  ProgressBar1.Max      := aMax;
  ProgressBar1.Position := aProgress;
  ProgressBar1.Update;
end;

procedure TClientForm.TimerEvent(const aTime: DateTime);
begin
  btnServertime.Caption := DateTimeToStr(aTime);
end;

procedure TClientForm.AfterConstruction;
begin
  inherited;

  if FROIndyHTTPChannel_Websocket = nil then
  begin
    FROIndyHTTPChannel_Websocket := TROIndyHTTPWebsocketChannel.Create(Self);
    FROIndyHTTPChannel_Websocket.Host := 'localhost';
    FROIndyHTTPChannel_Websocket.Port := 8099;
    FROIndyHTTPChannel_Websocket.KeepAlive := True;

    ROEventReceiver1.Channel     := FROIndyHTTPChannel_Websocket;
    ROEventReceiver1.Message     := ROBinMessage1;
    ROEventReceiver1.ServiceName := 'dummy';
    ROEventReceiver1.RegisterEventHandlers([NewLibrary_Intf.EID_NewEventSink], [Self]);
    ROEventReceiver1.SynchronizeInvoke := True;
    ROEventReceiver1.Activate;
  end;
  RORemoteService.Channel := FROIndyHTTPChannel_Websocket;
end;

var
  FROIndyHTTPChannel_Websocket2: TROIndyHTTPWebsocketChannel;

procedure TClientForm.btnServertimeClick(Sender: TObject);
begin
  if FROIndyHTTPChannel_Websocket2 = nil then
  begin
    FROIndyHTTPChannel_Websocket2 := TROIndyHTTPWebsocketChannel.Create(Self);
    FROIndyHTTPChannel_Websocket2.Host := 'localhost';
    FROIndyHTTPChannel_Websocket2.Port := 8098;
  end;

  RORemoteService.Channel := FROIndyHTTPChannel_Websocket2;
  btnServertime.Caption   := DateTimeToStr(
     (RORemoteService as INewService).GetServerTime);
end;

end.
