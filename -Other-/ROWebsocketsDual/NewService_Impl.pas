unit NewService_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, SysUtils, 
  {RemObjects:} uROXMLIntf, uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Generated:} NewLibrary_Intf,
  ExtCtrls,
  uROSimpleEventRepository, uROHTTPWebsocketServer, Generics.Collections,
  IdCustomTCPServer;

type
  { TNewService }
  TNewService = class(TRORemoteDataModule,
                      INewService)
    procedure RORemoteDataModuleCreate(Sender: TObject);
  private
  protected
    FEventRepository: TROSimpleWebsocketEventRepository;
    FEventWriter: INewEventSink_Writer;
    procedure DoOnActivate(aClientID: TGUID; const aMessage: IROMessage); override;
  protected
    { INewService methods }
    function Sum(const A: Integer; const B: Integer): Integer;
    function GetServerTime: DateTime;

    procedure StartTimer;
    procedure StopTimer;
    procedure ExecuteLongStatementWithProgress;
  end;

  TTimerObject = class
  private
    FSimpleEventRepository: TROSimpleWebsocketEventRepository;
    ievent: INewEventSink_Writer;
    FTimer1: TTimer;
    procedure TimerEvent(Sender: TObject);
  public
    constructor Create(aServer: TROIndyHTTPWebsocketServer);
  end;

  TROSessionContext = class(TROSession)
  public
    WSContext: TIdServerWSContext;
  end;

implementation

{$IFDEF DELPHIXE2UP}
{%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}

{$IFNDEF FPC}
  {$R *.dfm}
{$ELSE}
  {$R *.lfm}
{$ENDIF}
uses
  {Generated:} NewLibrary_Invk, uROClassFactories,
  uROBinMessage, Windows, fServerForm, IdThread;

procedure Create_NewService(out anInstance : IUnknown);
begin
  anInstance := TNewService.Create(nil);
end;

{ NewService }
procedure TNewService.StartTimer;
var
  server: TROIndyHTTPWebsocketServer;
begin
  RegisterEventClient(AnsiString(GuidToString(Self.ClientID)), NewLibrary_Intf.EID_NewEventSink);

  server := (Self.Transport.GetTransportObject as TROIndyHTTPWebsocketServer);
  TTimerObject.Create(server);
end;

procedure TNewService.StopTimer;
begin
  //todo
end;

function TNewService.Sum(const A: Integer; const B: Integer): Integer;
begin
  RegisterEventClient(AnsiString(GuidToString(Self.ClientID)), NewLibrary_Intf.EID_NewEventSink);

  Result := A + B;
end;

procedure TNewService.DoOnActivate(aClientID: TGUID;
  const aMessage: IROMessage);
var
  context: TIdServerWSContext;
begin
  context := (TThread.CurrentThread as TIdThreadWithTask).Task as TIdServerWSContext;
  SessionManager  := fServerForm.ServerForm.ROInMemorySessionManager1;
  EventRepository := fServerForm.ServerForm.ROInMemoryEventRepository1;

  inherited;

  (Session as TROSessionContext).WSContext := context;
end;

procedure TNewService.ExecuteLongStatementWithProgress;
var
  i, j: Integer;
begin
  RegisterEventClient(AnsiString(GuidToString(Self.ClientID)), NewLibrary_Intf.EID_NewEventSink);

  for j := 0 to 100 do
    for i := 0 to 100 do
    begin
      FEventWriter.ExcludeSender := False;
      FEventWriter.ProgressEvent(Self.ClientID, i, 100);
      Sleep(10);
    end;
end;

function TNewService.GetServerTime: DateTime;
begin
  Result := Now;
end;

procedure TNewService.RORemoteDataModuleCreate(Sender: TObject);
begin
  SessionManager  := fServerForm.ServerForm.ROInMemorySessionManager1;
  Self.EventRepository := fServerForm.ServerForm.ROInMemoryEventRepository1;
  FEventWriter := fServerForm.ServerForm.ROInMemoryEventRepository1.GetEventWriter(INewEventSink_Writer) as INewEventSink_Writer;
end;

var
  fClassFactory: IROClassFactory;
{ TTimerObject }

constructor TTimerObject.Create(aServer: TROIndyHTTPWebsocketServer);
var i: Integer;
begin
  FSimpleEventRepository := TROSimpleWebsocketEventRepository.Create;
  FSimpleEventRepository.ROServer := aServer;
  for i := 0 to aServer.Dispatchers.Count - 1 do
  begin
    if aServer.Dispatchers[i].Message is TROBinMessage then
    begin
      FSimpleEventRepository.Message  := aServer.Dispatchers[i].Message;
      Break;
    end;
  end;
  (FSimpleEventRepository as IInterface)._AddRef;
  ievent := FSimpleEventRepository.GetEventWriter(INewEventSink_Writer) as INewEventSink_Writer;

  TThread.Queue(nil,
  procedure
  begin
    FTimer1 := TTimer.Create(nil);
    FTimer1.Interval := 1;
    FTimer1.OnTimer  := TimerEvent;
    FTimer1.Enabled  := True;
  end);
end;

procedure TTimerObject.TimerEvent(Sender: TObject);
begin
  with FSimpleEventRepository.ROServer.IndyServer.Contexts.LockList do
  try
    if Count = 0 then Exit;
  finally
    FSimpleEventRepository.ROServer.IndyServer.Contexts.UnlockList;
  end;

  ievent.TimerEvent(FSimpleEventRepository.Message.ClientID, Now);
end;

initialization
  fClassFactory := TROClassFactory.Create('NewService', {$IFDEF FPC}@{$ENDIF}Create_NewService, TNewService_Invoker);
  // RegisterForZeroConf(fClassFactory,'_NewService_rosdk._tcp.');

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.
