unit NewLibrary_Invk;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ Do not modify this unit manually, or your changes will be lost when this   }
{ unit is regenerated the next time you compile the project.                 }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes,
  {RemObjects:} uROXMLIntf, uROServer, uROServerIntf, uROTypes, uROClientIntf,
  {Generated:} NewLibrary_Intf;

type
  TSeekOrigin = Classes.TSeekOrigin; // fake declaration
  TNewService_Invoker = class(TROInvoker)
  private
  protected
  public
    constructor Create; override;
  published
    procedure Invoke_Sum(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_GetServerTime(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_TestParams(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
    procedure Invoke_TestEnum(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
  end;

implementation

uses
  {RemObjects:} uRORes, uROClient;

{ TNewService_Invoker }

constructor TNewService_Invoker.Create;
begin
  inherited Create;
  FAbstract := False;
end;

procedure TNewService_Invoker.Invoke_Sum(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function Sum(const A: Integer; const B: Integer): Integer; }
var
  A: Integer;
  B: Integer;
  lResult: Integer;
begin
  try
    __Message.Read('A', TypeInfo(Integer), A, []);
    __Message.Read('B', TypeInfo(Integer), B, []);

    lResult := (__Instance as INewService).Sum(A, B);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'SumResponse');
    __Message.Write('Result', TypeInfo(Integer), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_GetServerTime(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function GetServerTime: DateTime; }
var
  lResult: DateTime;
begin
  try
    lResult := (__Instance as INewService).GetServerTime;

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'GetServerTimeResponse');
    __Message.Write('Result', TypeInfo(DateTime), lResult, [paIsDateTime]);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_TestParams(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function TestParams(const InParamInt: Integer; const InParamAnsi: AnsiString; const InParamBool: Boolean; const InParamCur: Currency;
                        const InParamDatetime: DateTime; const InParamDec: Decimal; const InParamDouble: Double; const InParamInt64: Int64;
                        const InParamUtf8: Utf8String; const InParamWide: UnicodeString; out OutParamAnsi: AnsiString; out OutParamBool: Boolean;
                        out OutParamCurr: Currency; out OutParamDatetime: DateTime; out OutParamDec: Decimal; out OutParamDouble: Double;
                        out OutParamInt64: Int64; out OutParamInt: Integer; out OutParamUtf8: Utf8String; out OutParamWide: UnicodeString;
                        var InOutParam: AnsiString): Boolean; }
var
  InParamInt: Integer;
  InParamAnsi: AnsiString;
  InParamBool: Boolean;
  InParamCur: Currency;
  InParamDatetime: DateTime;
  InParamDec: Decimal;
  InParamDouble: Double;
  InParamInt64: Int64;
  InParamUtf8: Utf8String;
  InParamWide: UnicodeString;
  OutParamAnsi: AnsiString;
  OutParamBool: Boolean;
  OutParamCurr: Currency;
  OutParamDatetime: DateTime;
  OutParamDec: Decimal;
  OutParamDouble: Double;
  OutParamInt64: Int64;
  OutParamInt: Integer;
  OutParamUtf8: Utf8String;
  OutParamWide: UnicodeString;
  InOutParam: AnsiString;
  lResult: Boolean;
begin
  try
    __Message.Read('InParamInt', TypeInfo(Integer), InParamInt, []);
    __Message.Read('InParamAnsi', TypeInfo(AnsiString), InParamAnsi, []);
    __Message.Read('InParamBool', TypeInfo(Boolean), InParamBool, []);
    __Message.Read('InParamCur', TypeInfo(Currency), InParamCur, []);
    __Message.Read('InParamDatetime', TypeInfo(DateTime), InParamDatetime, [paIsDateTime]);
    __Message.Read('InParamDec', TypeInfo(Decimal), InParamDec, []);
    __Message.Read('InParamDouble', TypeInfo(Double), InParamDouble, []);
    __Message.Read('InParamInt64', TypeInfo(Int64), InParamInt64, []);
    __Message.Read('InParamUtf8', TypeInfo(Utf8String), InParamUtf8, []);
    __Message.Read('InParamWide', TypeInfo(UnicodeString), InParamWide, []);
    __Message.Read('InOutParam', TypeInfo(AnsiString), InOutParam, []);

    lResult := (__Instance as INewService).TestParams(InParamInt, InParamAnsi, InParamBool, InParamCur, InParamDatetime, InParamDec, InParamDouble, InParamInt64,
        InParamUtf8, InParamWide, OutParamAnsi, OutParamBool, OutParamCurr, OutParamDatetime, OutParamDec, OutParamDouble, OutParamInt64, OutParamInt,
        OutParamUtf8, OutParamWide, InOutParam);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'TestParamsResponse');
    __Message.Write('Result', TypeInfo(Boolean), lResult, []);
    __Message.Write('OutParamAnsi', TypeInfo(AnsiString), OutParamAnsi, []);
    __Message.Write('OutParamBool', TypeInfo(Boolean), OutParamBool, []);
    __Message.Write('OutParamCurr', TypeInfo(Currency), OutParamCurr, []);
    __Message.Write('OutParamDatetime', TypeInfo(DateTime), OutParamDatetime, [paIsDateTime]);
    __Message.Write('OutParamDec', TypeInfo(Decimal), OutParamDec, []);
    __Message.Write('OutParamDouble', TypeInfo(Double), OutParamDouble, []);
    __Message.Write('OutParamInt64', TypeInfo(Int64), OutParamInt64, []);
    __Message.Write('OutParamInt', TypeInfo(Integer), OutParamInt, []);
    __Message.Write('OutParamUtf8', TypeInfo(Utf8String), OutParamUtf8, []);
    __Message.Write('OutParamWide', TypeInfo(UnicodeString), OutParamWide, []);
    __Message.Write('InOutParam', TypeInfo(AnsiString), InOutParam, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

procedure TNewService_Invoker.Invoke_TestEnum(const __Instance:IInterface; const __Message:IROMessage; const __Transport:IROTransport; out __oResponseOptions:TROResponseOptions);
{ function TestEnum(const NewParam: NewEnum): NewEnum; }
var
  NewParam: NewLibrary_Intf.NewEnum;
  lResult: NewLibrary_Intf.NewEnum;
begin
  try
    __Message.Read('NewParam', TypeInfo(NewLibrary_Intf.NewEnum), NewParam, []);

    lResult := (__Instance as INewService).TestEnum(NewParam);

    __Message.InitializeResponseMessage(__Transport, 'NewLibrary', 'NewService', 'TestEnumResponse');
    __Message.Write('Result', TypeInfo(NewLibrary_Intf.NewEnum), lResult, []);
    __Message.Finalize;
    __Message.UnsetAttributes(__Transport);

  finally
  end;
end;

initialization
end.
