unit %UNIT_NAME%;

//----------------------------------------------------------------------------//
// This unit was automatically generated by the RemObjects SDK after reading  //
// the RODL file associated with this project .                               //
//                                                                            //
// Do not modify this unit manually, or your changes will be lost when this   //
// unit is regenerated the next time you compile the project.                 //
//----------------------------------------------------------------------------//

interface

uses
  w3system;

(* This codegen depends on RemObjects.js -> add reference in index.html
* Usage:
*  var channel := THTTPChannel.Create("http://localhost:8099/JSON");
*  var msg     := TJSONMessage.Create();
*  var service := CoNewService.Create(msg as IROMessage, channel as IROTransportChannel);
*  service.Sum(1, 2,
*    procedure(aResult: Integer)
*    begin
*      w3_ShowMessage('Result = ' + IntToStr(aResult) );
*    end);
*)

const
  TargetNamespace = '%NAMESPACE_NAME%';

  { Event ID's }
  // <%%% START EVENT_SINKS %%%>
  EID_%EVENT_SINK_NAME% = '%EVENT_SINK_NAME%';
  // <%%% END EVENT_SINKS %%%>

type
  {RO types}
  DateTime = TDateTime;
  AnsiString = string;
  Currency = Double;
  Decimal = Double;
  Int64 = Integer;
  Utf8String = string;
  WideString = string;

  {RO interfaces}
  IROTransport = interface
  end;

  IROMessage = interface
    procedure InitializeRequestMessage(aTransport : IROTransport; aLibraryName, anInterfaceName, aMessageName : string);
    procedure Write(aName : string; aTypeInfo : string; aValue: variant);
    //procedure Read (aName : string; aTypeInfo : string; var aValue: variant);
    function  Read (aName : string; aTypeInfo : string): Variant;
    procedure Finalize;

    procedure UnsetAttributes(aTransport: IROTransport);
    procedure FreeStream;

    function  Clone: IROMessage;
  end;

  {RO message classes}
  TMessage = class(TObject,
                   IROMessage)
  public
    fROMessage: Variant;

    procedure InitializeRequestMessage(aTransport : IROTransport; aLibraryName, anInterfaceName, aMessageName : string);
    procedure Write(aName : string; aTypeInfo : string; aValue: variant);
    function  Read (aName : string; aTypeInfo : string): Variant;
    procedure Finalize;

    procedure UnsetAttributes(aTransport: IROTransport);
    procedure FreeStream;

    function  Clone: IROMessage;
  end;
  
  TJSONMessage = class(TMessage)
  public
    constructor Create();
  end;

  {RO channels}
  TDispatchResult = procedure(aResult: Variant);

  IROTransportChannel = interface(IROTransport)
      procedure Dispatch(aMessage: IROMessage; aCallback: TDispatchResult); 
  end;
  
  TChannel = class(TObject,
                   IROTransportChannel)
  protected
    procedure Dispatch(aMessage: IROMessage; aCallback: TDispatchResult); 
  public
    fROChannel: Variant;
  end;

  THTTPChannel = class(TChannel)
  public
    constructor Create(aURL: string);
  end; 

  {RO base proxy class}
  TROProxy = class
  protected
    FMessage: IROMessage; 
    FTransportChannel: IROTransportChannel;
  
    function __GetInterfaceName:string; virtual; abstract;
    function __GetMessage : IROMessage; virtual;
    function __GetTransportChannel: IROTransportChannel;   
  public
    constructor Create(aMessage : IROMessage; aTransportChannel : IROTransportChannel); virtual;
  end;
  
  { Forward declarations }
  // <%%% START SERVICES %%%>
  I%SERVICE_NAME% = interface;
  // <%%% END SERVICES %%%>
  // <%%% START ARRAYS %%%>

  %ARRAY_NAME% = class;
  // <%%% END ARRAYS %%%>
  // <%%% START STRUCTS %%%>

  %STRUCT_NAME% = class;
  // <%%% END STRUCTS %%%>
  // <%%% START EXCEPTIONS %%%>

  %EXCEPTION_NAME% = class;
  // <%%% END EXCEPTIONS %%%>
  // <%%% START EVENT_SINKS %%%>

  I%EVENT_SINK_NAME% = interface;
  // <%%% END EVENT_SINKS %%%>

  { Enumerateds }
  // <%%% START ENUMS %%%>
  // <%%% START DOCUMENTATION %%%>
  { Description:
      %CONTENT% }
  // <%%% END DOCUMENTATION %%%>
const
  %LIBRARY_NAME%_%ENUM_NAME% = [
      // <%%% START VALUES %%%>
      "%VALUE_NAME_NOPREFIX%",
      // <%%% END VALUES %%%>
      ];
type
  %ENUM_NAME% = (
    // <%%% START VALUES %%%>
    %VALUE_NAME%,
    // <%%% END VALUES %%%>
    );
  // <%%% END ENUMS %%%>
  // <%%% START STRUCTS %%%>

  { %STRUCT_NAME% }
  // <%%% START DOCUMENTATION %%%>
  { Description:
      %CONTENT% }
  // <%%% END DOCUMENTATION %%%>
  %STRUCT_NAME% = class(%STRUCT_ANCESTOR_NAME%)
  private
    FDestroying: Boolean;

    // <%%% START FIELDS_NO_STRIP %%%>
    f%FIELD_NAME%: %FIELD_TYPE%;
    // <%%% END FIELDS_NO_STRIP %%%>
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    function Get%FIELD_NAME%: %FIELD_TYPE%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  protected
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    property int_%FIELD_NAME%: %FIELD_TYPE% read f%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% END FIELDS_NO_STRIP %%%>   
  public
    // <%%% START STRUCT_GENERATE_DEFAULT_VALUES %%%>
    constructor Create(aCollection : TCollection); override;
    // <%%% END STRUCT_GENERATE_DEFAULT_VALUES %%%>
    // <%%% START IF_STRUCT_HAS_ATTRIBUTES %%%>
    class function GetAttributeCount: Integer; override;
    class function GetAttributeName(aIndex: Integer): string; override;
    class function GetAttributeValue(aIndex: Integer): string; override;
    // <%%% END IF_STRUCT_HAS_ATTRIBUTES %%%>
    procedure Assign(iSource: TPersistent); override;
    destructor Destroy; override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
  published
    // Fields must be published for the ancestor destructor to find and destroy them.
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    property %FIELD_NAME%:%FIELD_TYPE% read f%FIELD_NAME% write f%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    property %FIELD_NAME%:%FIELD_TYPE% read f%FIELD_NAME% write f%FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    property %FIELD_NAME%:%FIELD_TYPE% read Get%FIELD_NAME% write f%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  end;

  { %STRUCT_COLLECTION_NAME% }
  %STRUCT_COLLECTION_NAME% = class(%STRUCT_ANCESTOR_COLLECTION_NAME%)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: integer): %STRUCT_NAME%;
    procedure SetItems(aIndex: integer; const Value: %STRUCT_NAME%);
  public
    constructor Create; overload;
    function Add: %STRUCT_NAME%; reintroduce;
    // <%%% START ARRAYS_IS_FOUND %%%>
    procedure SaveToArray(anArray: %ARRAY_NAME%); overload;
    procedure LoadFromArray(anArray: %ARRAY_NAME%); overload;
    // <%%% END ARRAYS_IS_FOUND %%%>
    property Items[Index: integer]:%STRUCT_NAME% read GetItems write SetItems; default;
  end;

  // <%%% END STRUCTS %%%>
  // <%%% START ARRAYS %%%>

  { %ARRAY_NAME% }
  // <%%% START DOCUMENTATION %%%>
  { Description:
      %CONTENT% }
  // <%%% END DOCUMENTATION %%%>
  %ARRAY_NAME%_%ARRAY_TYPE% = array of %ARRAY_TYPE%;
  %ARRAY_NAME% = class(TROArray)
  private
    fCount: Integer;
    fItems : %ARRAY_NAME%_%ARRAY_TYPE%;
  protected
    procedure Grow; virtual;
    function GetItems(aIndex: integer): %ARRAY_TYPE%;
    procedure SetItems(aIndex: integer; const Value: %ARRAY_TYPE%);
    function GetCount: integer; override;
  public
    // <%%% START IF_ARRAY_HAS_ATTRIBUTES %%%>
    class function GetAttributeCount: Integer; override;
    class function GetAttributeName(aIndex: Integer): string; override;
    class function GetAttributeValue(aIndex: Integer): string; override;
    // <%%% END IF_ARRAY_HAS_ATTRIBUTES %%%>
    class function GetItemType: PTypeInfo; override;
    // <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
    class function GetItemClass: TClass; override;
    // <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
    class function GetItemSize: integer; override;

    function GetItemRef(aIndex: integer): pointer; override;
    // <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
    procedure SetItemRef(aIndex: integer; Ref: pointer); override;
    // <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
    procedure Clear; override;
    procedure Delete(aIndex: integer); override;
    procedure Resize(ElementCount: integer); override;

    procedure Assign(iSource:TPersistent); override;
    procedure ReadComplex(ASerializer: TObject); override;
    procedure WriteComplex(ASerializer: TObject); override;
    // <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
    function Add: %ARRAY_TYPE%; overload;
    function Add(const Value: %ARRAY_TYPE%):integer; overload;
    // <%%% END IF_ARRAY_TYPE_COMPLEX %%%>    
    // <%%% START IF_ARRAY_TYPE_SIMPLE %%%>
    function Add(const Value: %ARRAY_TYPE%):integer;
    function GetIndex(const aValue: %ARRAY_TYPE%; const aStartFrom: integer = 0): integer;overload;
    function GetIndex(const aPropertyName : string;
                      const aPropertyValue : Variant;
                      StartFrom : integer = 0;
                      Options : TROSearchOptions = [soIgnoreCase]) : integer; override;
    function IndexOf(const aValue: %ARRAY_TYPE%; const aStartFrom: integer = 0): integer;    
    // <%%% END IF_ARRAY_TYPE_SIMPLE %%%>
    // <%%% START IF_ARRAY_TYPE_ENUM %%%>
    function GetIndex(const aValue: %ARRAY_TYPE%; const aStartFrom: integer = 0): integer;overload;
    function GetIndex(const aPropertyName : string;
                      const aPropertyValue : Variant;
                      StartFrom : integer = 0;
                      Options : TROSearchOptions = [soIgnoreCase]) : integer; override;
    function IndexOf(const aValue: %ARRAY_TYPE%; const aStartFrom: integer = 0): integer;
    // <%%% END IF_ARRAY_TYPE_ENUM %%%>

    property Count : integer read GetCount;
    property Items[Index: integer]:%ARRAY_TYPE% read GetItems write SetItems; default;
    property InnerArray: %ARRAY_NAME%_%ARRAY_TYPE% read fItems;
  end;
  // <%%% END ARRAYS %%%>

  { Exceptions }
  // <%%% START EXCEPTIONS %%%>
  // <%%% START DOCUMENTATION %%%>
  { Description:
      %CONTENT% }
  // <%%% END DOCUMENTATION %%%>
  %EXCEPTION_NAME% = class(%EXCEPTION_ANCESTOR_NAME%)
  private
    // <%%% START FIELDS_NO_STRIP %%%>
    f%FIELD_NAME%: %FIELD_TYPE%;
    // <%%% END FIELDS_NO_STRIP %%%>
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    function Get%FIELD_NAME%: %FIELD_TYPE%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  protected
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    property int_%FIELD_NAME%: %FIELD_TYPE% read f%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  public
    // <%%% START IF_EXCEPTION_HAS_ATTRIBUTES %%%>
    class function GetAttributeCount: Integer; override;
    class function GetAttributeName(aIndex: Integer): string; override;
    class function GetAttributeValue(aIndex: Integer): string; override;
    // <%%% END IF_EXCEPTION_HAS_ATTRIBUTES %%%>
    constructor Create(anExceptionMessage : string
                       // <%%% START ANCESTOR_FIELDS %%%>
                       ; a%FIELD_NAME%: %FIELD_TYPE%
                       // <%%% END ANCESTOR_FIELDS %%%>
                       // <%%% START FIELDS_NO_STRIP %%%>
                       ; a%FIELD_NAME%: %FIELD_TYPE%
                       // <%%% END FIELDS_NO_STRIP %%%>
                       );
    // <%%% START IF_HAS_FIELDS %%%>
    procedure Assign(ASource: EROException); override;
    procedure ReadException(ASerializer: TROBaseSerializer); override;
    procedure WriteException(ASerializer: TROBaseSerializer); override;
    // <%%% END IF_HAS_FIELDS %%%>
  published
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    property %FIELD_NAME%:%FIELD_TYPE% read f%FIELD_NAME% write f%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    property %FIELD_NAME%:%FIELD_TYPE% read f%FIELD_NAME% write f%FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    property %FIELD_NAME%:%FIELD_TYPE% read Get%FIELD_NAME% write f%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  end;
  // <%%% END EXCEPTIONS %%%>

  // <%%% START SERVICES %%%>
  { I%SERVICE_NAME% }
  // <%%% START DOCUMENTATION %%%>
  { Description:
      %CONTENT% }
  // <%%% END DOCUMENTATION %%%>
  { Callback definitions }
  // <%%% START OPERATIONS %%%>
  // <%%% START IF_FUNCTION_NOPARAMS %%%>
  T%SERVICE_NAME%_%OPERATION_NAME%_Result = procedure(aResult: %OPERATION_RESULT%);
  // <%%% END IF_FUNCTION_NOPARAMS %%%>
  // <%%% START IF_FUNCTION_PARAMS %%%>
  T%SERVICE_NAME%_%OPERATION_NAME%_Result = procedure(aResult: %OPERATION_RESULT%
                        // <%%% START OUT_PARAMS %%%>
                        ; a%PARAM_NAME%: %PARAM_TYPE%
                        // <%%% END OUT_PARAMS %%%>
                        );
  // <%%% END IF_FUNCTION_PARAMS %%%>
  // <%%% END OPERATIONS %%%>
  { Service definition }
  I%SERVICE_NAME% = interface %SERVICE_ANCESTOR_NAME%
    // <%%% START OPERATIONS %%%>       
    // <%%% START IF_FUNCTION_NOPARAMS %%%>
    procedure %OPERATION_NAME%(aCallback: T%SERVICE_NAME%_%OPERATION_NAME%_Result);
    // <%%% END IF_FUNCTION_NOPARAMS %%%>
    // <%%% START IF_FUNCTION_PARAMS %%%>
    procedure %OPERATION_NAME%(
               // <%%% START IN_PARAMS_NO_STRIP %%%>
               %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%;
               // <%%% END IN_PARAMS_NO_STRIP %%%>
               aCallback: T%SERVICE_NAME%_%OPERATION_NAME%_Result
               );
    // <%%% END IF_FUNCTION_PARAMS %%%>
    // <%%% START IF_PROCEDURE_NOPARAMS %%%>
    procedure %OPERATION_NAME%;
    // <%%% END IF_PROCEDURE_NOPARAMS %%%>
    // <%%% START IF_PROCEDURE_PARAMS %%%>
    procedure %OPERATION_NAME%(
                // <%%% START PARAMS %%%>
                %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%;
                // <%%% END PARAMS %%%>
                );
    // <%%% END IF_PROCEDURE_PARAMS %%%>
    // <%%% END OPERATIONS %%%>        
  end;

  { Co%SERVICE_NAME% }
  Co%SERVICE_NAME% = class
    class function Create(aMessage: IROMessage; aTransportChannel: IROTransportChannel): I%SERVICE_NAME%;
  end;

  { T%SERVICE_NAME%_Proxy }
  T%SERVICE_NAME%_Proxy = class(TROProxy, //%SERVICE_PROXY_ANCESTOR_NAME%, todo: ancestors?
                                I%SERVICE_NAME%)
  protected
    function __GetInterfaceName:string; override;

    // <%%% START OPERATIONS %%%>
    // <%%% START IF_FUNCTION_NOPARAMS %%%>
    procedure %OPERATION_NAME%(aCallback: T%SERVICE_NAME%_%OPERATION_NAME%_Result);
    // <%%% END IF_FUNCTION_NOPARAMS %%%>
    // <%%% START IF_FUNCTION_PARAMS %%%>
    procedure %OPERATION_NAME%(
               // <%%% START IN_PARAMS_NO_STRIP %%%>
               %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%;
               // <%%% END IN_PARAMS_NO_STRIP %%%>
               aCallback: T%SERVICE_NAME%_%OPERATION_NAME%_Result);
    // <%%% END IF_FUNCTION_PARAMS %%%>
    // <%%% START IF_PROCEDURE_NOPARAMS %%%>
    procedure %OPERATION_NAME%;
    // <%%% END IF_PROCEDURE_NOPARAMS %%%>
    // <%%% START IF_PROCEDURE_PARAMS %%%>
    procedure %OPERATION_NAME%(
                // <%%% START PARAMS %%%>
                %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%;
                // <%%% END PARAMS %%%>
                );
    // <%%% END IF_PROCEDURE_PARAMS %%%>
    // <%%% END OPERATIONS %%%>
  public
    constructor Create(aMessage: IROMessage; aTransportChannel: IROTransportChannel); override;
  end;

  // <%%% END SERVICES %%%>
  // <%%% START EVENT_SINKS %%%>
  { I%EVENT_SINK_NAME% }
  // <%%% START DOCUMENTATION %%%>

  { Description:
      %CONTENT% }
  // <%%% END DOCUMENTATION %%%>
  I%EVENT_SINK_NAME% = interface%EVENT_SINK_ANCESTOR_NAME%
    ['%EVENT_SINK_UID%']
    // <%%% START OPERATIONS %%%>
    procedure %OPERATION_NAME%(
                // <%%% START PARAMS %%%>
                %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%;
                // <%%% END PARAMS %%%>
                );
    // <%%% END OPERATIONS %%%>
  end;

  { I%EVENT_SINK_NAME%_Writer }
  // <%%% START DOCUMENTATION %%%>

  { Description:
      %CONTENT% }
  // <%%% END DOCUMENTATION %%%>
  I%EVENT_SINK_NAME%_Writer = interface(I%EVENT_SINK_WRITER_ANCESTOR_NAME%)
    ['%EVENT_SINK_UID%']
    // <%%% START OPERATIONS %%%>
    procedure %OPERATION_NAME%(const __Sender : TGUID
                // <%%% START PARAMS %%%>
                ; %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%
                // <%%% END PARAMS %%%>
                );
    // <%%% END OPERATIONS %%%>
  end;

  // <%%% END EVENT_SINKS %%%>
implementation
// <%%% START EXCEPTIONS %%%>
{ %EXCEPTION_NAME% }
// <%%% START IF_EXCEPTION_HAS_ATTRIBUTES %%%>

class function %EXCEPTION_NAME%.GetAttributeCount: Integer;
begin
  Result := %ATTRIBUTES_COUNT%;
end;

class function %EXCEPTION_NAME%.GetAttributeName(aIndex: Integer): string;
begin
  case aIndex of
// <%%% START ATTRIBUTES_NO_STRIP %%%>
    %ATTRIBUTE_INDEX%: Result := '%ATTRIBUTE_NAME%';
// <%%% END ATTRIBUTES_NO_STRIP %%%>
  end;
end;

class function %EXCEPTION_NAME%.GetAttributeValue(aIndex: Integer): string;
begin
  case aIndex of
// <%%% START ATTRIBUTES_NO_STRIP %%%>
    %ATTRIBUTE_INDEX%: Result := '%ATTRIBUTE_VALUE%';
// <%%% END ATTRIBUTES_NO_STRIP %%%>
  end;
end;
// <%%% END IF_EXCEPTION_HAS_ATTRIBUTES %%%>

constructor %EXCEPTION_NAME%.Create(anExceptionMessage : string
  // <%%% START ANCESTOR_FIELDS %%%>
  ; a%FIELD_NAME%: %FIELD_TYPE%
  // <%%% END ANCESTOR_FIELDS %%%>
  // <%%% START FIELDS_NO_STRIP %%%>
  ; a%FIELD_NAME%: %FIELD_TYPE%
  // <%%% END FIELDS_NO_STRIP %%%>
  );
begin
  inherited Create(anExceptionMessage
                   // <%%% START ANCESTOR_FIELDS %%%>
                   , a%FIELD_NAME%
                   // <%%% END ANCESTOR_FIELDS %%%>
                  );

  // <%%% START FIELDS_NO_STRIP %%%>
  f%FIELD_NAME% := a%FIELD_NAME%;
  // <%%% END FIELDS_NO_STRIP %%%>
end;
// <%%% START FIELDS_NO_STRIP %%%>
// <%%% START IF_FIELD_TYPE_COMPLEX %%%>

function %EXCEPTION_NAME%.Get%FIELD_NAME%: %FIELD_TYPE%;
begin
  // <%%% START IF_AUTO_CREATE_FIELDS %%%>
  if not Assigned(f%FIELD_NAME%) then
    // <%%% START IF_FIELD_NOT_EXCEPTION_TYPE %%%>
    f%FIELD_NAME% := %FIELD_TYPE%.Create();
    // <%%% END IF_FIELD_NOT_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    f%FIELD_NAME% := %FIELD_TYPE%.CreateFmt('',[]);
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
  // <%%% END IF_AUTO_CREATE_FIELDS %%%>
  Result := f%FIELD_NAME%;
end;
// <%%% END IF_FIELD_TYPE_COMPLEX %%%>
// <%%% END FIELDS_NO_STRIP %%%>
// <%%% START IF_HAS_FIELDS %%%>

procedure %EXCEPTION_NAME%.Assign(ASource: EROException);
var
  lSource: %UNIT_NAME%.%EXCEPTION_NAME%;
begin
  inherited Assign(ASource);
  if (ASource is %UNIT_NAME%.%EXCEPTION_NAME%) then begin
    lSource := %UNIT_NAME%.%EXCEPTION_NAME%(ASource);
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    %FIELD_NAME% := lSource.%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    %FIELD_NAME% := lSource.%FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_NOT_AUTO_CREATE_FIELDS %%%>
    if Assigned(f%FIELD_NAME%) then begin
      if Assigned(lSource.f%FIELD_NAME%) then
        %FIELD_NAME%.Assign(lSource.f%FIELD_NAME%)
      else
        FreeAndNil(f%FIELD_NAME%);
    end;
    // <%%% END IF_NOT_AUTO_CREATE_FIELDS %%%>
    // <%%% START IF_AUTO_CREATE_FIELDS %%%>
    if Assigned(lSource.f%FIELD_NAME%) then
      %FIELD_NAME%.Assign(lSource.f%FIELD_NAME%)
    else
      FreeAndNil(f%FIELD_NAME%);
    // <%%% END IF_AUTO_CREATE_FIELDS %%%>
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  end;
end;

procedure %EXCEPTION_NAME%.ReadException(ASerializer: TROBaseSerializer);
var
  // <%%% START ENTIRE_HIERARCHY_FIELDS %%%>
  l_%FIELD_NAME%: %FIELD_TYPE%;
  // <%%% END ENTIRE_HIERARCHY_FIELDS %%%>
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    // <%%% START IF_STRUCT_HAS_ANCESTOR %%%>
    inherited;
    // <%%% END IF_STRUCT_HAS_ANCESTOR %%%>
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    l_%FIELD_NAME% := int_%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_FIELD_BINARY_TYPE %%%>
    TROSerializer(ASerializer).ReadBinary('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_BINARY_TYPE %%%>
    // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
    TROSerializer(ASerializer).ReadEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(boolean), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
    // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
    TROSerializer(ASerializer).ReadDouble('%FIELD_ORIGINALNAME%', ftCurr, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
    // <%%% START IF_FIELD_DATETIME_TYPE %%%>
    TROSerializer(ASerializer).ReadDateTime('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DATETIME_TYPE %%%>
    // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
    TROSerializer(ASerializer).ReadDecimal('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
    // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
    TROSerializer(ASerializer).ReadDouble('%FIELD_ORIGINALNAME%', ftDouble, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
    // <%%% START IF_FIELD_GUID_TYPE %%%>
    TROSerializer(ASerializer).ReadGuid('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_GUID_TYPE %%%>
    // <%%% START IF_FIELD_INT64_TYPE %%%>
    TROSerializer(ASerializer).ReadInt64('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INT64_TYPE %%%>
    // <%%% START IF_FIELD_INTEGER_TYPE %%%>
    TROSerializer(ASerializer).ReadInteger('%FIELD_ORIGINALNAME%', otSLong, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INTEGER_TYPE %%%>
    // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
    TROSerializer(ASerializer).ReadAnsiString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
    // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
    TROSerializer(ASerializer).ReadUTF8String('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
    // <%%% START IF_FIELD_VARIANT_TYPE %%%>
    TROSerializer(ASerializer).ReadVariant('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_VARIANT_TYPE %%%>
    // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
    {$IFDEF UNICODE}
    TROSerializer(ASerializer).ReadUnicodeString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ELSE}
    TROSerializer(ASerializer).ReadWideString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ENDIF}
    // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
    // <%%% START IF_FIELD_XML_TYPE %%%>
    TROSerializer(ASerializer).ReadXml('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_XML_TYPE %%%>
    // <%%% START IF_FIELD_ARRAY_TYPE %%%>
    TROSerializer(ASerializer).ReadArray('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_ARRAY_TYPE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    TROSerializer(ASerializer).ReadEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(%FIELD_TYPE%), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_STRUCT_TYPE %%%>
    TROSerializer(ASerializer).ReadStruct('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_STRUCT_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    TROSerializer(ASerializer).ReadException('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_XSDATETIME_TYPE %%%>
    TROSerializer(ASerializer).ReadStruct('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_XSDATETIME_TYPE %%%>
    %FIELD_NAME% := l_%FIELD_NAME%;
    // <%%% END FIELDS_NO_STRIP %%%>
  end
  else begin
    // <%%% START ENTIRE_HIERARCHY_FIELDS %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    l_%FIELD_NAME% := int_%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_FIELD_BINARY_TYPE %%%>
    TROSerializer(ASerializer).ReadBinary('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_BINARY_TYPE %%%>
    // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
    TROSerializer(ASerializer).ReadEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(boolean), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
    // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
    TROSerializer(ASerializer).ReadDouble('%FIELD_ORIGINALNAME%', ftCurr, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
    // <%%% START IF_FIELD_DATETIME_TYPE %%%>
    TROSerializer(ASerializer).ReadDateTime('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DATETIME_TYPE %%%>
    // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
    TROSerializer(ASerializer).ReadDecimal('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
    // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
    TROSerializer(ASerializer).ReadDouble('%FIELD_ORIGINALNAME%', ftDouble, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
    // <%%% START IF_FIELD_GUID_TYPE %%%>
    TROSerializer(ASerializer).ReadGuid('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_GUID_TYPE %%%>
    // <%%% START IF_FIELD_INT64_TYPE %%%>
    TROSerializer(ASerializer).ReadInt64('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INT64_TYPE %%%>
    // <%%% START IF_FIELD_INTEGER_TYPE %%%>
    TROSerializer(ASerializer).ReadInteger('%FIELD_ORIGINALNAME%', otSLong, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INTEGER_TYPE %%%>
    // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
    TROSerializer(ASerializer).ReadAnsiString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
    // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
    TROSerializer(ASerializer).ReadUTF8String('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
    // <%%% START IF_FIELD_VARIANT_TYPE %%%>
    TROSerializer(ASerializer).ReadVariant('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_VARIANT_TYPE %%%>
    // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
    {$IFDEF UNICODE}
    TROSerializer(ASerializer).ReadUnicodeString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ELSE}
    TROSerializer(ASerializer).ReadWideString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ENDIF}
    // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
    // <%%% START IF_FIELD_XML_TYPE %%%>
    TROSerializer(ASerializer).ReadXml('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_XML_TYPE %%%>
    // <%%% START IF_FIELD_ARRAY_TYPE %%%>
    TROSerializer(ASerializer).ReadArray('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_ARRAY_TYPE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    TROSerializer(ASerializer).ReadEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(%FIELD_TYPE%), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_STRUCT_TYPE %%%>
    TROSerializer(ASerializer).ReadStruct('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_STRUCT_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    TROSerializer(ASerializer).ReadException('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_XSDATETIME_TYPE %%%>
    TROSerializer(ASerializer).ReadStruct('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_XSDATETIME_TYPE %%%>
    %FIELD_NAME% := l_%FIELD_NAME%;
    // <%%% END ENTIRE_HIERARCHY_FIELDS %%%>
  end;
end;

procedure %EXCEPTION_NAME%.WriteException(ASerializer: TROBaseSerializer);
var
  // <%%% START ENTIRE_HIERARCHY_FIELDS %%%>
  l_%FIELD_NAME%: %FIELD_TYPE%;
  // <%%% END ENTIRE_HIERARCHY_FIELDS %%%>
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    // <%%% START IF_STRUCT_HAS_ANCESTOR %%%>
    inherited;
    // <%%% END IF_STRUCT_HAS_ANCESTOR %%%>
    TROSerializer(ASerializer).ChangeClass(%EXCEPTION_NAME%);
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    l_%FIELD_NAME% := int_%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_FIELD_BINARY_TYPE %%%>
    TROSerializer(ASerializer).WriteBinary('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BINARY_TYPE %%%>
    // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
    TROSerializer(ASerializer).WriteEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(boolean), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
    // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
    TROSerializer(ASerializer).WriteDouble('%FIELD_ORIGINALNAME%', ftCurr, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
    // <%%% START IF_FIELD_DATETIME_TYPE %%%>
    TROSerializer(ASerializer).WriteDateTime('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DATETIME_TYPE %%%>
    // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
    TROSerializer(ASerializer).WriteDecimal('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
    // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
    TROSerializer(ASerializer).WriteDouble('%FIELD_ORIGINALNAME%', ftDouble, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
    // <%%% START IF_FIELD_GUID_TYPE %%%>
    TROSerializer(ASerializer).WriteGuid('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_GUID_TYPE %%%>
    // <%%% START IF_FIELD_INT64_TYPE %%%>
    TROSerializer(ASerializer).WriteInt64('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INT64_TYPE %%%>
    // <%%% START IF_FIELD_INTEGER_TYPE %%%>
    TROSerializer(ASerializer).WriteInteger('%FIELD_ORIGINALNAME%', otSLong, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INTEGER_TYPE %%%>
    // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
    TROSerializer(ASerializer).WriteAnsiString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
    // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
    TROSerializer(ASerializer).WriteUTF8String('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
    // <%%% START IF_FIELD_VARIANT_TYPE %%%>
    TROSerializer(ASerializer).WriteVariant('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_VARIANT_TYPE %%%>
    // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
    {$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ELSE}
    TROSerializer(ASerializer).WriteWideString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ENDIF}
    // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
    // <%%% START IF_FIELD_XML_TYPE %%%>
    TROSerializer(ASerializer).WriteXml('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_XML_TYPE %%%>
    // <%%% START IF_FIELD_ARRAY_TYPE %%%>
    TROSerializer(ASerializer).WriteArray('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_ARRAY_TYPE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    TROSerializer(ASerializer).WriteEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(%FIELD_TYPE%), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_STRUCT_TYPE %%%>
    TROSerializer(ASerializer).WriteStruct('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_STRUCT_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    TROSerializer(ASerializer).WriteException('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_XSDATETIME_TYPE %%%>
    TROSerializer(ASerializer).WriteStruct('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_XSDATETIME_TYPE %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  end
  else begin
    // <%%% START ENTIRE_HIERARCHY_FIELDS %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    l_%FIELD_NAME% := int_%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_FIELD_BINARY_TYPE %%%>
    TROSerializer(ASerializer).WriteBinary('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BINARY_TYPE %%%>
    // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
    TROSerializer(ASerializer).WriteEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(boolean), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
    // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
    TROSerializer(ASerializer).WriteDouble('%FIELD_ORIGINALNAME%', ftCurr, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
    // <%%% START IF_FIELD_DATETIME_TYPE %%%>
    TROSerializer(ASerializer).WriteDateTime('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DATETIME_TYPE %%%>
    // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
    TROSerializer(ASerializer).WriteDecimal('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
    // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
    TROSerializer(ASerializer).WriteDouble('%FIELD_ORIGINALNAME%', ftDouble, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
    // <%%% START IF_FIELD_GUID_TYPE %%%>
    TROSerializer(ASerializer).WriteGuid('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_GUID_TYPE %%%>
    // <%%% START IF_FIELD_INT64_TYPE %%%>
    TROSerializer(ASerializer).WriteInt64('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INT64_TYPE %%%>
    // <%%% START IF_FIELD_INTEGER_TYPE %%%>
    TROSerializer(ASerializer).WriteInteger('%FIELD_ORIGINALNAME%', otSLong, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INTEGER_TYPE %%%>
    // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
    TROSerializer(ASerializer).WriteAnsiString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
    // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
    TROSerializer(ASerializer).WriteUTF8String('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
    // <%%% START IF_FIELD_VARIANT_TYPE %%%>
    TROSerializer(ASerializer).WriteVariant('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_VARIANT_TYPE %%%>
    // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
    {$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ELSE}
    TROSerializer(ASerializer).WriteWideString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ENDIF}
    // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
    // <%%% START IF_FIELD_XML_TYPE %%%>
    TROSerializer(ASerializer).WriteXml('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_XML_TYPE %%%>
    // <%%% START IF_FIELD_ARRAY_TYPE %%%>
    TROSerializer(ASerializer).WriteArray('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_ARRAY_TYPE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    TROSerializer(ASerializer).WriteEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(%FIELD_TYPE%), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_STRUCT_TYPE %%%>
    TROSerializer(ASerializer).WriteStruct('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_STRUCT_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    TROSerializer(ASerializer).WriteException('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_XSDATETIME_TYPE %%%>
    TROSerializer(ASerializer).WriteStruct('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_XSDATETIME_TYPE %%%>
    // <%%% END ENTIRE_HIERARCHY_FIELDS %%%>
  end;
end;

// <%%% END IF_HAS_FIELDS %%%>
// <%%% END EXCEPTIONS %%%>
// <%%% START ARRAYS %%%>
{ %ARRAY_NAME% }
// <%%% START IF_ARRAY_HAS_ATTRIBUTES %%%>

class function %ARRAY_NAME%.GetAttributeCount: Integer;
begin
  Result := %ATTRIBUTES_COUNT%;
end;

class function %ARRAY_NAME%.GetAttributeName(aIndex: Integer): string;
begin
  case aIndex of
// <%%% START ATTRIBUTES_NO_STRIP %%%>
    %ATTRIBUTE_INDEX%: Result := '%ATTRIBUTE_NAME%';
// <%%% END ATTRIBUTES_NO_STRIP %%%>
  end;
end;

class function %ARRAY_NAME%.GetAttributeValue(aIndex: Integer): string;
begin
  case aIndex of
// <%%% START ATTRIBUTES_NO_STRIP %%%>
    %ATTRIBUTE_INDEX%: Result := '%ATTRIBUTE_VALUE%';
// <%%% END ATTRIBUTES_NO_STRIP %%%>
  end;
end;
// <%%% END IF_ARRAY_HAS_ATTRIBUTES %%%>

procedure %ARRAY_NAME%.Assign(iSource: TPersistent);
var 
  lSource:%ARRAY_NAME%;
  i: integer;
// <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
  lItem: %ARRAY_TYPE%;
// <%%% END IF_ARRAY_TYPE_COMPLEX %%%>    
begin
  if (iSource is %ARRAY_NAME%) then begin
    lSource := %ARRAY_NAME%(iSource);
    Clear();
    
    // <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
    for i := 0 to lSource.Count-1 do 
      if Assigned(lSource.Items[i]) then begin
        lItem := %ARRAY_TYPE%(lSource.Items[i].ClassType.Create);
        lItem.Assign(lSource.Items[i]);
        Add(lItem);
      end
      else begin
        Add(nil);
      end;
    // <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
    // <%%% START IF_ARRAY_TYPE_SIMPLE %%%>
    Resize(lSource.Count);
    for i := 0 to lSource.Count-1 do    
      Items[i] := lSource.Items[i];
    // <%%% END IF_ARRAY_TYPE_SIMPLE %%%>
    // <%%% START IF_ARRAY_TYPE_ENUM %%%>
    Resize(lSource.Count);
    for i := 0 to lSource.Count-1 do
      Items[i] := lSource.Items[i];
   // <%%% END IF_ARRAY_TYPE_ENUM %%%>
  end
  else begin
    inherited Assign(iSource);
  end;
end;

class function %ARRAY_NAME%.GetItemType: PTypeInfo;
begin
  Result := TypeInfo(%ARRAY_TYPE%);
end;
// <%%% START IF_ARRAY_TYPE_COMPLEX %%%>

class function %ARRAY_NAME%.GetItemClass: TClass;
begin
  Result := %ARRAY_TYPE%;
end;
// <%%% END IF_ARRAY_TYPE_COMPLEX %%%>

class function %ARRAY_NAME%.GetItemSize: integer;
begin
  Result := SizeOf(%ARRAY_TYPE%);
end;

function %ARRAY_NAME%.GetItems(aIndex: integer): %ARRAY_TYPE%;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  Result := fItems[aIndex];
end;

function %ARRAY_NAME%.GetItemRef(aIndex: integer): pointer;
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  // <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
  Result := fItems[aIndex];
  // <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
  // <%%% START IF_ARRAY_TYPE_SIMPLE %%%>
  Result := @fItems[aIndex];
  // <%%% END IF_ARRAY_TYPE_SIMPLE %%%>
  // <%%% START IF_ARRAY_TYPE_ENUM %%%>
  Result := @fItems[aIndex];
  // <%%% END IF_ARRAY_TYPE_ENUM %%%>
end;
// <%%% START IF_ARRAY_TYPE_ENUM %%%> 

function %ARRAY_NAME%.GetIndex(const aValue: %ARRAY_TYPE%; const aStartFrom: integer = 0): integer;
begin
  Result := IndexOf(aValue,aStartFrom);
end;
    
function %ARRAY_NAME%.GetIndex(const aPropertyName: string;
  const aPropertyValue: Variant; StartFrom: integer;
  Options: TROSearchOptions): integer;
begin
  Result := -1;
end;

function %ARRAY_NAME%.IndexOf(const aValue: %ARRAY_TYPE%; const aStartFrom: integer = 0): integer;
begin
  for Result := aStartFrom to Count-1 do
    if Items[Result] = aValue then Exit;
  Result := -1;
end;
// <%%% END IF_ARRAY_TYPE_ENUM %%%> 
// <%%% START IF_ARRAY_TYPE_COMPLEX %%%>

procedure %ARRAY_NAME%.SetItemRef(aIndex: integer; Ref: pointer);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  if Ref <> fItems[aIndex] then begin
    if fItems[aIndex] <> nil then fItems[aIndex].Free;
    fItems[aIndex] := Ref;
  end;
end;
// <%%% END IF_ARRAY_TYPE_COMPLEX %%%>

procedure %ARRAY_NAME%.Clear;
// <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
var 
  i: integer;
// <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
begin
  // <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
  for i := 0 to (Count-1) do fItems[i].Free();
  // <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
  SetLength(fItems, 0);
  FCount := 0;
end;

procedure %ARRAY_NAME%.Delete(aIndex: integer);
var 
  i: integer;
begin
  if (aIndex>=Count) then RaiseError(err_InvalidIndex, [aIndex]);

  // <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
  fItems[aIndex].Free();
  // <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
  
  if (aIndex<Count-1) then
    for i := aIndex to Count-2 do fItems[i] := fItems[i+1];

  SetLength(fItems, Count-1);
  Dec(FCount);
end;

procedure %ARRAY_NAME%.SetItems(aIndex: integer; const Value: %ARRAY_TYPE%);
begin
  if (aIndex < 0) or (aIndex >= Count) then RaiseError(err_ArrayIndexOutOfBounds,[aIndex]);
  // <%%% START IF_ARRAY_TYPE_COMPLEX %%%>  
  if fItems[aIndex] <> Value then begin
    fItems[aIndex].Free;    
    fItems[aIndex] := Value;
  end;
  // <%%% END IF_ARRAY_TYPE_COMPLEX %%%>  
  // <%%% START IF_ARRAY_TYPE_SIMPLE %%%>
  fItems[aIndex] := Value;  
  // <%%% END IF_ARRAY_TYPE_SIMPLE %%%> 
  // <%%% START IF_ARRAY_TYPE_ENUM %%%>
  fItems[aIndex] := Value;
  // <%%% END IF_ARRAY_TYPE_ENUM %%%>
end;

procedure %ARRAY_NAME%.Resize(ElementCount: integer);
// <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
var 
  i: Integer;
// <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
begin
  if fCount = ElementCount then Exit;
// <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
  for i := FCount -1 downto ElementCount do
    FItems[i].Free;
// <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
  SetLength(fItems, ElementCount);
// <%%% START IF_ARRAY_TYPE_COMPLEX %%%>
  for i := FCount to ElementCount -1 do
    FItems[i] := %ARRAY_TYPE%.Create;
// <%%% END IF_ARRAY_TYPE_COMPLEX %%%>
  FCount := ElementCount;
end;

function %ARRAY_NAME%.GetCount: integer;
begin
  Result := FCount;
end;

procedure %ARRAY_NAME%.Grow;
var
  Delta, Capacity: Integer;
begin
  Capacity := Length(fItems);
  if Capacity > 64 then
    Delta := Capacity div 4
  else
    if Capacity > 8 then
      Delta := 16
   else
      Delta := 4;
  SetLength(fItems, Capacity + Delta);
end;
// <%%% START IF_ARRAY_TYPE_COMPLEX %%%>

function %ARRAY_NAME%.Add: %ARRAY_TYPE%;
begin
  // <%%% START IF_ARRAY_NOT_EXCEPTION_TYPE %%%>
  Result := %ARRAY_TYPE%.Create;
  // <%%% END IF_ARRAY_NOT_EXCEPTION_TYPE %%%>
  // <%%% START IF_ARRAY_EXCEPTION_TYPE %%%>
  Result := %ARRAY_TYPE%.Create('',[]);
  // <%%% END IF_ARRAY_EXCEPTION_TYPE %%%>
  Add(Result);
end;
// <%%% END IF_ARRAY_TYPE_COMPLEX %%%>

function %ARRAY_NAME%.Add(const Value:%ARRAY_TYPE%): integer;
begin
  Result := Count;
  if Length(fItems) = Result then
    Grow;
  fItems[Result] := Value;
  Inc(fCount);
end;

// <%%% START IF_ARRAY_TYPE_SIMPLE %%%>
function %ARRAY_NAME%.GetIndex(const aValue: %ARRAY_TYPE%; const aStartFrom: integer = 0): integer;
begin
  Result := IndexOf(aValue,aStartFrom);
end;

function %ARRAY_NAME%.GetIndex(const aPropertyName : string;
  const aPropertyValue : Variant; StartFrom : integer;
  Options : TROSearchOptions) : integer;
begin
  Result := -1;
end;

function %ARRAY_NAME%.IndexOf(const aValue: %ARRAY_TYPE%; const aStartFrom: integer = 0): integer;
begin
  for Result := aStartFrom to Count-1 do
    if Items[Result] = aValue then Exit;
  Result := -1;  
end;
// <%%% END IF_ARRAY_TYPE_SIMPLE %%%>

procedure %ARRAY_NAME%.ReadComplex(ASerializer: TObject);
var
  lval: %ARRAY_TYPE%;
  i: integer;
begin
  for i := 0 to Count-1 do begin
    with TROSerializer(ASerializer) do begin
      // <%%% START IF_ARRAY_BINARY_TYPE %%%>
      ReadBinary(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_BINARY_TYPE %%%>
      // <%%% START IF_ARRAY_BOOLEAN_TYPE %%%>
      ReadEnumerated(GetArrayElementName(GetItemType, GetItemRef(i)), TypeInfo(boolean), lval, i);
      // <%%% END IF_ARRAY_BOOLEAN_TYPE %%%>
      // <%%% START IF_ARRAY_CURRENCY_TYPE %%%>
      ReadDouble(GetArrayElementName(GetItemType, GetItemRef(i)), ftCurr, lval, i);
      // <%%% END IF_ARRAY_CURRENCY_TYPE %%%>
      // <%%% START IF_ARRAY_DATETIME_TYPE %%%>
      ReadDateTime(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_DATETIME_TYPE %%%>
      // <%%% START IF_ARRAY_DECIMAL_TYPE %%%>
      ReadDecimal(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_DECIMAL_TYPE %%%>
      // <%%% START IF_ARRAY_DOUBLE_TYPE %%%>
      ReadDouble(GetArrayElementName(GetItemType, GetItemRef(i)), ftDouble, lval, i);
      // <%%% END IF_ARRAY_DOUBLE_TYPE %%%>
      // <%%% START IF_ARRAY_GUID_TYPE %%%>
      ReadGuid(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_GUID_TYPE %%%>
      // <%%% START IF_ARRAY_INT64_TYPE %%%>
      ReadInt64(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_INT64_TYPE %%%>
      // <%%% START IF_ARRAY_INTEGER_TYPE %%%>
      ReadInteger(GetArrayElementName(GetItemType, GetItemRef(i)), otSLong, lval, i);
      // <%%% END IF_ARRAY_INTEGER_TYPE %%%>
      // <%%% START IF_ARRAY_ANSISTRING_TYPE %%%>
      ReadAnsiString(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_ANSISTRING_TYPE %%%>
      // <%%% START IF_ARRAY_UTF8STRING_TYPE %%%>
      ReadUTF8String(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_UTF8STRING_TYPE %%%>
      // <%%% START IF_ARRAY_VARIANT_TYPE %%%>
      ReadVariant(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_VARIANT_TYPE %%%>
      // <%%% START IF_ARRAY_WIDESTRING_TYPE %%%>
      {$IFDEF UNICODE}
      ReadUnicodeString(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      {$ELSE}
      ReadWideString(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      {$ENDIF}
      // <%%% END IF_ARRAY_WIDESTRING_TYPE %%%>
      // <%%% START IF_ARRAY_XML_TYPE %%%>
      ReadXml(GetArrayElementName(GetItemType, GetItemRef(i)), lval, i);
      // <%%% END IF_ARRAY_XML_TYPE %%%>
      // <%%% START IF_ARRAY_ARRAY_TYPE %%%>
      lval := nil;      
      ReadArray(GetArrayElementName(GetItemType, GetItemRef(i)), %ARRAY_TYPE%, lval, i);
      // <%%% END IF_ARRAY_ARRAY_TYPE %%%>
      // <%%% START IF_ARRAY_ENUM_TYPE %%%>
      ReadEnumerated(GetArrayElementName(GetItemType, GetItemRef(i)), TypeInfo(%ARRAY_TYPE%), lval, i);
      // <%%% END IF_ARRAY_ENUM_TYPE %%%>
      // <%%% START IF_ARRAY_STRUCT_TYPE %%%>
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), %ARRAY_TYPE%, lval, i);
      // <%%% END IF_ARRAY_STRUCT_TYPE %%%>
      // <%%% START IF_ARRAY_EXCEPTION_TYPE %%%>
      ReadException(GetArrayElementName(GetItemType, GetItemRef(i)),lval, i);
      // <%%% END IF_ARRAY_EXCEPTION_TYPE %%%>
      // <%%% START IF_ARRAY_XSDATETIME_TYPE %%%>
      ReadStruct(GetArrayElementName(GetItemType, GetItemRef(i)), %ARRAY_TYPE%, lval, i);
      // <%%% END IF_ARRAY_XSDATETIME_TYPE %%%>
    end;  
    Items[i] := lval;
  end;
end;

procedure %ARRAY_NAME%.WriteComplex(ASerializer: TObject);
var
  i: integer;
begin
  for i := 0 to Count-1 do
    with TROSerializer(ASerializer) do
      // <%%% START IF_ARRAY_BINARY_TYPE %%%>
      WriteBinary(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_BINARY_TYPE %%%>
      // <%%% START IF_ARRAY_BOOLEAN_TYPE %%%>
      WriteEnumerated(GetArrayElementName(GetItemType, GetItemRef(i)), TypeInfo(boolean), fItems[i], i);
      // <%%% END IF_ARRAY_BOOLEAN_TYPE %%%>
      // <%%% START IF_ARRAY_CURRENCY_TYPE %%%>
      WriteDouble(GetArrayElementName(GetItemType, GetItemRef(i)), ftCurr, fItems[i], i);
      // <%%% END IF_ARRAY_CURRENCY_TYPE %%%>
      // <%%% START IF_ARRAY_DATETIME_TYPE %%%>
      WriteDateTime(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_DATETIME_TYPE %%%>
      // <%%% START IF_ARRAY_DECIMAL_TYPE %%%>
      WriteDecimal(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_DECIMAL_TYPE %%%>
      // <%%% START IF_ARRAY_DOUBLE_TYPE %%%>
      WriteDouble(GetArrayElementName(GetItemType, GetItemRef(i)), ftDouble, fItems[i], i);
      // <%%% END IF_ARRAY_DOUBLE_TYPE %%%>
      // <%%% START IF_ARRAY_GUID_TYPE %%%>
      WriteGuid(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_GUID_TYPE %%%>
      // <%%% START IF_ARRAY_INT64_TYPE %%%>
      WriteInt64(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_INT64_TYPE %%%>
      // <%%% START IF_ARRAY_INTEGER_TYPE %%%>
      WriteInteger(GetArrayElementName(GetItemType, GetItemRef(i)), otSLong, fItems[i], i);
      // <%%% END IF_ARRAY_INTEGER_TYPE %%%>
      // <%%% START IF_ARRAY_ANSISTRING_TYPE %%%>
      WriteAnsiString(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_ANSISTRING_TYPE %%%>
      // <%%% START IF_ARRAY_UTF8STRING_TYPE %%%>
      WriteUTF8String(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_UTF8STRING_TYPE %%%>
      // <%%% START IF_ARRAY_VARIANT_TYPE %%%>
      WriteVariant(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_VARIANT_TYPE %%%>
      // <%%% START IF_ARRAY_WIDESTRING_TYPE %%%>
      {$IFDEF UNICODE}
      WriteUnicodeString(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      {$ELSE}
      WriteWideString(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      {$ENDIF}
      // <%%% END IF_ARRAY_WIDESTRING_TYPE %%%>
      // <%%% START IF_ARRAY_XML_TYPE %%%>
      WriteXml(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], i);
      // <%%% END IF_ARRAY_XML_TYPE %%%>
      // <%%% START IF_ARRAY_ARRAY_TYPE %%%>
      WriteArray(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], , %ARRAY_TYPE%, i);
      // <%%% END IF_ARRAY_ARRAY_TYPE %%%>
      // <%%% START IF_ARRAY_ENUM_TYPE %%%>
      WriteEnumerated(GetArrayElementName(GetItemType, GetItemRef(i)), TypeInfo(%ARRAY_TYPE%), fItems[i], i);
      // <%%% END IF_ARRAY_ENUM_TYPE %%%>
      // <%%% START IF_ARRAY_STRUCT_TYPE %%%>
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], %ARRAY_TYPE%, i);
      // <%%% END IF_ARRAY_STRUCT_TYPE %%%>
      // <%%% START IF_ARRAY_EXCEPTION_TYPE %%%>
      WriteException(GetArrayElementName(GetItemType, GetItemRef(i)),fItems[i], i);
      // <%%% END IF_ARRAY_EXCEPTION_TYPE %%%>
      // <%%% START IF_ARRAY_XSDATETIME_TYPE %%%>
      WriteStruct(GetArrayElementName(GetItemType, GetItemRef(i)), fItems[i], %ARRAY_TYPE%, i);
      // <%%% END IF_ARRAY_XSDATETIME_TYPE %%%>
end;

// <%%% END ARRAYS %%%>
// <%%% START STRUCTS %%%>
{ %STRUCT_NAME% }
// <%%% START IF_STRUCT_HAS_ATTRIBUTES %%%>

class function %STRUCT_NAME%.GetAttributeCount: Integer;
begin
  Result := %ATTRIBUTES_COUNT%;
end;

class function %STRUCT_NAME%.GetAttributeName(aIndex: Integer): string;
begin
  case aIndex of
// <%%% START ATTRIBUTES_NO_STRIP %%%>
    %ATTRIBUTE_INDEX%: Result := '%ATTRIBUTE_NAME%';
// <%%% END ATTRIBUTES_NO_STRIP %%%>
  end;
end;

class function %STRUCT_NAME%.GetAttributeValue(aIndex: Integer): string;
begin
  case aIndex of
// <%%% START ATTRIBUTES_NO_STRIP %%%>
    %ATTRIBUTE_INDEX%: Result := '%ATTRIBUTE_VALUE%';
// <%%% END ATTRIBUTES_NO_STRIP %%%>
  end;
end;
// <%%% END IF_STRUCT_HAS_ATTRIBUTES %%%>

procedure %STRUCT_NAME%.Assign(iSource: TPersistent);
// <%%% START IF_HAS_FIELDS %%%>
var
  lSource: %UNIT_NAME%.%STRUCT_NAME%;
// <%%% END IF_HAS_FIELDS %%%>
begin
  inherited Assign(iSource);
  // <%%% START IF_HAS_FIELDS %%%>
  if (iSource is %UNIT_NAME%.%STRUCT_NAME%) then begin
    lSource := %UNIT_NAME%.%STRUCT_NAME%(iSource);

  // <%%% END IF_HAS_FIELDS %%%>
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    %FIELD_NAME% := lSource.%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    %FIELD_NAME% := lSource.%FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_NOT_AUTO_CREATE_FIELDS %%%>
    if Assigned(f%FIELD_NAME%) then begin
      if Assigned(lSource.f%FIELD_NAME%) then
        %FIELD_NAME%.Assign(lSource.f%FIELD_NAME%)
      else
        FreeAndNil(f%FIELD_NAME%);
    end;
    // <%%% END IF_NOT_AUTO_CREATE_FIELDS %%%>
    // <%%% START IF_AUTO_CREATE_FIELDS %%%>
    if Assigned(lSource.f%FIELD_NAME%) then 
      %FIELD_NAME%.Assign(lSource.f%FIELD_NAME%)
    else
      FreeAndNil(f%FIELD_NAME%);
    // <%%% END IF_AUTO_CREATE_FIELDS %%%>
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  // <%%% START IF_HAS_FIELDS %%%>
  end;
  // <%%% END IF_HAS_FIELDS %%%>
end;
// <%%% START STRUCT_GENERATE_DEFAULT_VALUES %%%>

constructor %STRUCT_NAME%.Create(aCollection : TCollection);
begin
  inherited Create(aCollection);
  // <%%% START FIELDS_NO_STRIP %%%>
  // <%%% START IF_FIELD_HAS_DEFAULT_VALUE %%%>
  // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
  f%FIELD_NAME% := %DEFAULT_VALUE%;
  // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
  // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
  f%FIELD_NAME% := %DEFAULT_VALUE%;
  // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
  // <%%% START IF_FIELD_DATETIME_TYPE %%%>
  f%FIELD_NAME% := StrToDateTimeDef('%DEFAULT_VALUE%',0);
  // <%%% END IF_FIELD_DATETIME_TYPE %%%>
  // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
  f%FIELD_NAME% := %DEFAULT_VALUE%;
  // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
  // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
  f%FIELD_NAME% := %DEFAULT_VALUE%;
  // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
  // <%%% START IF_FIELD_GUID_TYPE %%%>
  f%FIELD_NAME% := '%DEFAULT_VALUE%';
  // <%%% END IF_FIELD_GUID_TYPE %%%>
  // <%%% START IF_FIELD_INT64_TYPE %%%>
  f%FIELD_NAME% := %DEFAULT_VALUE%;
  // <%%% END IF_FIELD_INT64_TYPE %%%>
  // <%%% START IF_FIELD_INTEGER_TYPE %%%>
  f%FIELD_NAME% := %DEFAULT_VALUE%;
  // <%%% END IF_FIELD_INTEGER_TYPE %%%>
  // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
  f%FIELD_NAME% := '%DEFAULT_VALUE%';
  // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
  // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
  f%FIELD_NAME% := '%DEFAULT_VALUE%';
  // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
  // <%%% START IF_FIELD_VARIANT_TYPE %%%>
  f%FIELD_NAME% := '%DEFAULT_VALUE%';
  // <%%% END IF_FIELD_VARIANT_TYPE %%%>
  // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
  f%FIELD_NAME% := '%DEFAULT_VALUE%';
  // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
  // <%%% END IF_FIELD_HAS_DEFAULT_VALUE %%%>
  // <%%% END FIELDS_NO_STRIP %%%>
end;
// <%%% END STRUCT_GENERATE_DEFAULT_VALUES %%%>

destructor %STRUCT_NAME%.Destroy;
begin
  FDestroying := True;
  try
    inherited Destroy;
  finally
    FDestroying := False;
  end;
end;
// <%%% START FIELDS_NO_STRIP %%%>
// <%%% START IF_FIELD_TYPE_COMPLEX %%%>

function %STRUCT_NAME%.Get%FIELD_NAME%: %FIELD_TYPE%;
begin
  // <%%% START IF_AUTO_CREATE_FIELDS %%%>
  if not Assigned(f%FIELD_NAME%) and not FDestroying then
    // <%%% START IF_FIELD_NOT_EXCEPTION_TYPE %%%>
    f%FIELD_NAME% := %FIELD_TYPE%.Create();
    // <%%% END IF_FIELD_NOT_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    f%FIELD_NAME% := %FIELD_TYPE%.CreateFmt('',[]);
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
  // <%%% END IF_AUTO_CREATE_FIELDS %%%>
  Result := f%FIELD_NAME%;
end;
// <%%% END IF_FIELD_TYPE_COMPLEX %%%>
// <%%% END FIELDS_NO_STRIP %%%>

procedure %STRUCT_NAME%.ReadComplex(ASerializer: TObject);
// <%%% START IF_HAS_ENTIRE_HIERARCHY_FIELDS %%%>
var
// <%%% END IF_HAS_ENTIRE_HIERARCHY_FIELDS %%%>
  // <%%% START ENTIRE_HIERARCHY_FIELDS %%%>
  l_%FIELD_NAME%: %FIELD_TYPE%;
  // <%%% END ENTIRE_HIERARCHY_FIELDS %%%>
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    // <%%% START IF_STRUCT_HAS_ANCESTOR %%%>
    inherited;
    // <%%% END IF_STRUCT_HAS_ANCESTOR %%%>
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    l_%FIELD_NAME% := int_%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_FIELD_BINARY_TYPE %%%>
    TROSerializer(ASerializer).ReadBinary('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_BINARY_TYPE %%%>
    // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
    TROSerializer(ASerializer).ReadEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(boolean), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
    // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
    TROSerializer(ASerializer).ReadDouble('%FIELD_ORIGINALNAME%', ftCurr, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
    // <%%% START IF_FIELD_DATETIME_TYPE %%%>
    TROSerializer(ASerializer).ReadDateTime('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DATETIME_TYPE %%%>
    // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
    TROSerializer(ASerializer).ReadDecimal('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
    // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
    TROSerializer(ASerializer).ReadDouble('%FIELD_ORIGINALNAME%', ftDouble, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
    // <%%% START IF_FIELD_GUID_TYPE %%%>
    TROSerializer(ASerializer).ReadGuid('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_GUID_TYPE %%%>
    // <%%% START IF_FIELD_INT64_TYPE %%%>
    TROSerializer(ASerializer).ReadInt64('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INT64_TYPE %%%>
    // <%%% START IF_FIELD_INTEGER_TYPE %%%>
    TROSerializer(ASerializer).ReadInteger('%FIELD_ORIGINALNAME%', otSLong, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INTEGER_TYPE %%%>
    // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
    TROSerializer(ASerializer).ReadAnsiString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
    // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
    TROSerializer(ASerializer).ReadUTF8String('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
    // <%%% START IF_FIELD_VARIANT_TYPE %%%>
    TROSerializer(ASerializer).ReadVariant('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_VARIANT_TYPE %%%>
    // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
    {$IFDEF UNICODE}
    TROSerializer(ASerializer).ReadUnicodeString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ELSE}
    TROSerializer(ASerializer).ReadWideString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ENDIF}
    // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
    // <%%% START IF_FIELD_XML_TYPE %%%>
    TROSerializer(ASerializer).ReadXml('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_XML_TYPE %%%>
    // <%%% START IF_FIELD_ARRAY_TYPE %%%>
    TROSerializer(ASerializer).ReadArray('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_ARRAY_TYPE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    TROSerializer(ASerializer).ReadEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(%FIELD_TYPE%), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_STRUCT_TYPE %%%>
    TROSerializer(ASerializer).ReadStruct('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_STRUCT_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    TROSerializer(ASerializer).ReadException('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_XSDATETIME_TYPE %%%>
    TROSerializer(ASerializer).ReadStruct('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_XSDATETIME_TYPE %%%>
    %FIELD_NAME% := l_%FIELD_NAME%;
    // <%%% END FIELDS_NO_STRIP %%%>
  end
  else begin
    // <%%% START ENTIRE_HIERARCHY_FIELDS %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    l_%FIELD_NAME% := int_%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_FIELD_BINARY_TYPE %%%>
    TROSerializer(ASerializer).ReadBinary('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_BINARY_TYPE %%%>
    // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
    TROSerializer(ASerializer).ReadEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(boolean), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
    // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
    TROSerializer(ASerializer).ReadDouble('%FIELD_ORIGINALNAME%', ftCurr, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
    // <%%% START IF_FIELD_DATETIME_TYPE %%%>
    TROSerializer(ASerializer).ReadDateTime('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DATETIME_TYPE %%%>
    // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
    TROSerializer(ASerializer).ReadDecimal('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
    // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
    TROSerializer(ASerializer).ReadDouble('%FIELD_ORIGINALNAME%', ftDouble, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
    // <%%% START IF_FIELD_GUID_TYPE %%%>
    TROSerializer(ASerializer).ReadGuid('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_GUID_TYPE %%%>
    // <%%% START IF_FIELD_INT64_TYPE %%%>
    TROSerializer(ASerializer).ReadInt64('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INT64_TYPE %%%>
    // <%%% START IF_FIELD_INTEGER_TYPE %%%>
    TROSerializer(ASerializer).ReadInteger('%FIELD_ORIGINALNAME%', otSLong, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INTEGER_TYPE %%%>
    // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
    TROSerializer(ASerializer).ReadAnsiString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
    // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
    TROSerializer(ASerializer).ReadUTF8String('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
    // <%%% START IF_FIELD_VARIANT_TYPE %%%>
    TROSerializer(ASerializer).ReadVariant('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_VARIANT_TYPE %%%>
    // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
    {$IFDEF UNICODE}
    TROSerializer(ASerializer).ReadUnicodeString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ELSE}
    TROSerializer(ASerializer).ReadWideString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ENDIF}
    // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
    // <%%% START IF_FIELD_XML_TYPE %%%>
    TROSerializer(ASerializer).ReadXml('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_XML_TYPE %%%>
    // <%%% START IF_FIELD_ARRAY_TYPE %%%>
    TROSerializer(ASerializer).ReadArray('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_ARRAY_TYPE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    TROSerializer(ASerializer).ReadEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(%FIELD_TYPE%), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_STRUCT_TYPE %%%>
    TROSerializer(ASerializer).ReadStruct('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_STRUCT_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    TROSerializer(ASerializer).ReadException('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_XSDATETIME_TYPE %%%>
    TROSerializer(ASerializer).ReadStruct('%FIELD_ORIGINALNAME%', %FIELD_TYPE%, l_%FIELD_NAME%);
    if int_%FIELD_NAME% <> l_%FIELD_NAME% then %FIELD_NAME%.Free;
    // <%%% END IF_FIELD_XSDATETIME_TYPE %%%>
    %FIELD_NAME% := l_%FIELD_NAME%;
    // <%%% END ENTIRE_HIERARCHY_FIELDS %%%>
  end;
end;

procedure %STRUCT_NAME%.WriteComplex(ASerializer: TObject);
// <%%% START IF_HAS_ENTIRE_HIERARCHY_FIELDS %%%>
var
// <%%% END IF_HAS_ENTIRE_HIERARCHY_FIELDS %%%>
  // <%%% START ENTIRE_HIERARCHY_FIELDS %%%>
  l_%FIELD_NAME%: %FIELD_TYPE%;
  // <%%% END ENTIRE_HIERARCHY_FIELDS %%%>
begin
  if TROSerializer(ASerializer).RecordStrictOrder then begin
    // <%%% START IF_STRUCT_HAS_ANCESTOR %%%>
    inherited;
    // <%%% END IF_STRUCT_HAS_ANCESTOR %%%>
    TROSerializer(ASerializer).ChangeClass(%STRUCT_NAME%);
    // <%%% START FIELDS_NO_STRIP %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    l_%FIELD_NAME% := int_%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_FIELD_BINARY_TYPE %%%>
    TROSerializer(ASerializer).WriteBinary('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BINARY_TYPE %%%>
    // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
    TROSerializer(ASerializer).WriteEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(boolean), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
    // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
    TROSerializer(ASerializer).WriteDouble('%FIELD_ORIGINALNAME%', ftCurr, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
    // <%%% START IF_FIELD_DATETIME_TYPE %%%>
    TROSerializer(ASerializer).WriteDateTime('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DATETIME_TYPE %%%>
    // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
    TROSerializer(ASerializer).WriteDecimal('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
    // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
    TROSerializer(ASerializer).WriteDouble('%FIELD_ORIGINALNAME%', ftDouble, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
    // <%%% START IF_FIELD_GUID_TYPE %%%>
    TROSerializer(ASerializer).WriteGuid('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_GUID_TYPE %%%>
    // <%%% START IF_FIELD_INT64_TYPE %%%>
    TROSerializer(ASerializer).WriteInt64('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INT64_TYPE %%%>
    // <%%% START IF_FIELD_INTEGER_TYPE %%%>
    TROSerializer(ASerializer).WriteInteger('%FIELD_ORIGINALNAME%', otSLong, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INTEGER_TYPE %%%>
    // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
    TROSerializer(ASerializer).WriteAnsiString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
    // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
    TROSerializer(ASerializer).WriteUTF8String('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
    // <%%% START IF_FIELD_VARIANT_TYPE %%%>
    TROSerializer(ASerializer).WriteVariant('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_VARIANT_TYPE %%%>
    // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
    {$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ELSE}
    TROSerializer(ASerializer).WriteWideString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ENDIF}
    // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
    // <%%% START IF_FIELD_XML_TYPE %%%>
    TROSerializer(ASerializer).WriteXml('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_XML_TYPE %%%>
    // <%%% START IF_FIELD_ARRAY_TYPE %%%>
    TROSerializer(ASerializer).WriteArray('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_ARRAY_TYPE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    TROSerializer(ASerializer).WriteEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(%FIELD_TYPE%), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_STRUCT_TYPE %%%>
    TROSerializer(ASerializer).WriteStruct('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_STRUCT_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    TROSerializer(ASerializer).WriteException('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_XSDATETIME_TYPE %%%>
    TROSerializer(ASerializer).WriteStruct('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_XSDATETIME_TYPE %%%>
    // <%%% END FIELDS_NO_STRIP %%%>
  end
  else begin
    // <%%% START ENTIRE_HIERARCHY_FIELDS %%%>
    // <%%% START IF_FIELD_TYPE_SIMPLE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_SIMPLE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    l_%FIELD_NAME% := %FIELD_NAME%;
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_TYPE_COMPLEX %%%>
    l_%FIELD_NAME% := int_%FIELD_NAME%;
    // <%%% END IF_FIELD_TYPE_COMPLEX %%%>
    // <%%% START IF_FIELD_BINARY_TYPE %%%>
    TROSerializer(ASerializer).WriteBinary('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BINARY_TYPE %%%>
    // <%%% START IF_FIELD_BOOLEAN_TYPE %%%>
    TROSerializer(ASerializer).WriteEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(boolean), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_BOOLEAN_TYPE %%%>
    // <%%% START IF_FIELD_CURRENCY_TYPE %%%>
    TROSerializer(ASerializer).WriteDouble('%FIELD_ORIGINALNAME%', ftCurr, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_CURRENCY_TYPE %%%>
    // <%%% START IF_FIELD_DATETIME_TYPE %%%>
    TROSerializer(ASerializer).WriteDateTime('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DATETIME_TYPE %%%>
    // <%%% START IF_FIELD_DECIMAL_TYPE %%%>
    TROSerializer(ASerializer).WriteDecimal('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DECIMAL_TYPE %%%>
    // <%%% START IF_FIELD_DOUBLE_TYPE %%%>
    TROSerializer(ASerializer).WriteDouble('%FIELD_ORIGINALNAME%', ftDouble, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_DOUBLE_TYPE %%%>
    // <%%% START IF_FIELD_GUID_TYPE %%%>
    TROSerializer(ASerializer).WriteGuid('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_GUID_TYPE %%%>
    // <%%% START IF_FIELD_INT64_TYPE %%%>
    TROSerializer(ASerializer).WriteInt64('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INT64_TYPE %%%>
    // <%%% START IF_FIELD_INTEGER_TYPE %%%>
    TROSerializer(ASerializer).WriteInteger('%FIELD_ORIGINALNAME%', otSLong, l_%FIELD_NAME%);
    // <%%% END IF_FIELD_INTEGER_TYPE %%%>
    // <%%% START IF_FIELD_ANSISTRING_TYPE %%%>
    TROSerializer(ASerializer).WriteAnsiString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ANSISTRING_TYPE %%%>
    // <%%% START IF_FIELD_UTF8STRING_TYPE %%%>
    TROSerializer(ASerializer).WriteUTF8String('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_UTF8STRING_TYPE %%%>
    // <%%% START IF_FIELD_VARIANT_TYPE %%%>
    TROSerializer(ASerializer).WriteVariant('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_VARIANT_TYPE %%%>
    // <%%% START IF_FIELD_WIDESTRING_TYPE %%%>
    {$IFDEF UNICODE}
    TROSerializer(ASerializer).WriteUnicodeString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ELSE}
    TROSerializer(ASerializer).WriteWideString('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    {$ENDIF}
    // <%%% END IF_FIELD_WIDESTRING_TYPE %%%>
    // <%%% START IF_FIELD_XML_TYPE %%%>
    TROSerializer(ASerializer).WriteXml('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_XML_TYPE %%%>
    // <%%% START IF_FIELD_ARRAY_TYPE %%%>
    TROSerializer(ASerializer).WriteArray('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_ARRAY_TYPE %%%>
    // <%%% START IF_FIELD_ENUM_TYPE %%%>
    TROSerializer(ASerializer).WriteEnumerated('%FIELD_ORIGINALNAME%', TypeInfo(%FIELD_TYPE%), l_%FIELD_NAME%);
    // <%%% END IF_FIELD_ENUM_TYPE %%%>
    // <%%% START IF_FIELD_STRUCT_TYPE %%%>
    TROSerializer(ASerializer).WriteStruct('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_STRUCT_TYPE %%%>
    // <%%% START IF_FIELD_EXCEPTION_TYPE %%%>
    TROSerializer(ASerializer).WriteException('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%);
    // <%%% END IF_FIELD_EXCEPTION_TYPE %%%>
    // <%%% START IF_FIELD_XSDATETIME_TYPE %%%>
    TROSerializer(ASerializer).WriteStruct('%FIELD_ORIGINALNAME%', l_%FIELD_NAME%, %FIELD_TYPE%);
    // <%%% END IF_FIELD_XSDATETIME_TYPE %%%>
    // <%%% END ENTIRE_HIERARCHY_FIELDS %%%>
  end;
end;

{ %STRUCT_COLLECTION_NAME% }
constructor %STRUCT_COLLECTION_NAME%.Create;
begin
  inherited Create(%STRUCT_NAME%);
end;

constructor %STRUCT_COLLECTION_NAME%.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function %STRUCT_COLLECTION_NAME%.Add: %STRUCT_NAME%;
begin
  Result := %STRUCT_NAME%(inherited Add);
end;

function %STRUCT_COLLECTION_NAME%.GetItems(aIndex: integer): %STRUCT_NAME%;
begin
  Result := %STRUCT_NAME%(inherited Items[aIndex]);
end;
// <%%% START ARRAYS_IS_FOUND %%%>

procedure %STRUCT_COLLECTION_NAME%.LoadFromArray(anArray: %ARRAY_NAME%);
var
  i : integer;
begin
  Clear;
  for i := 0 to (anArray.Count-1) do
    if anArray[i] <> nil then
      anArray[i].Clone.Collection := Self;
end;

procedure %STRUCT_COLLECTION_NAME%.SaveToArray(anArray: %ARRAY_NAME%);
var
  i : integer;
begin
  anArray.Clear;
  for i := 0 to (Count-1) do begin  
    if Assigned(Items[i]) then
      anArray.Add(%STRUCT_NAME%(Items[i].Clone))
    else
      anArray.Add(nil);    
  end;
end;
// <%%% END ARRAYS_IS_FOUND %%%>

procedure %STRUCT_COLLECTION_NAME%.SetItems(aIndex: integer; const Value: %STRUCT_NAME%);
begin
  %STRUCT_NAME%(inherited Items[aIndex]).Assign(Value);
end;
// <%%% END STRUCTS %%%>
// <%%% START SERVICES %%%>

{ Co%SERVICE_NAME% }

class function Co%SERVICE_NAME%.Create(aMessage: IROMessage; aTransportChannel: IROTransportChannel): I%SERVICE_NAME%;
begin
  Result := T%SERVICE_NAME%_Proxy.Create(aMessage, aTransportChannel);
end;

{ T%SERVICE_NAME%_Proxy }

function T%SERVICE_NAME%_Proxy.__GetInterfaceName:string;
begin
  Result := '%SERVICE_NAME%';
end;

constructor T%SERVICE_NAME%_Proxy.Create(aMessage: IROMessage; aTransportChannel: IROTransportChannel);
begin
  inherited Create(aMessage, aTransportChannel);
  
  asm
    //this.fServiceName = this.fServiceName || @__GetInterfaceName || "%SERVICE_NAME_UNSAFE%";
    this.fServiceName = "%SERVICE_NAME_UNSAFE%";
  end;
end;
// <%%% START OPERATIONS %%%>
// <%%% START IF_FUNCTION_NOPARAMS %%%>

procedure T%SERVICE_NAME%_Proxy.%OPERATION_NAME%(aCallback: T%SERVICE_NAME%_%OPERATION_NAME%_Result);
// <%%% END IF_FUNCTION_NOPARAMS %%%>
// <%%% START IF_FUNCTION_PARAMS %%%>

procedure T%SERVICE_NAME%_Proxy.%OPERATION_NAME%(
           // <%%% START IN_PARAMS_NO_STRIP %%%>
           %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%;
           // <%%% END IN_PARAMS_NO_STRIP %%%>
           aCallback: T%SERVICE_NAME%_%OPERATION_NAME%_Result);
// <%%% END IF_FUNCTION_PARAMS %%%>
// <%%% START IF_FUNCTION %%%>           
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;             
begin
  lMessage := __GetMessage.Clone;
  lTransportChannel := __GetTransportChannel;
  // <%%% START OUT_PARAMS_NO_STRIP %%%>
  // <%%% START IF_PARAM_TYPE_COMPLEX %%%>
  %PARAM_NAME% := nil;
  // <%%% END IF_PARAM_TYPE_COMPLEX %%%>
  // <%%% END OUT_PARAMS_NO_STRIP %%%>
  // <%%% START IF_RESULT_COMPLEX %%%>
  Result := nil;
  // <%%% END IF_RESULT_COMPLEX %%%>
  lMessage.InitializeRequestMessage(lTransportChannel, '%LIBRARY_NAME%', __GetInterfaceName, '%OPERATION_NAME%');
  // <%%% START IN_PARAMS_NO_STRIP %%%>
  lMessage.Write('%PARAM_NAME%', "%PARAM_TYPE_FULL_QUALIFIED%", %PARAM_NAME%);
  // <%%% END IN_PARAMS_NO_STRIP %%%>
  lMessage.Finalize;

  lTransportChannel.Dispatch(lMessage,
      procedure(resultmsg: Variant)
      begin
        var msg := TMessage.Create;  //create message reader as wrapper
        msg.fROMessage := resultmsg;

        var vResult := msg.Read('Result', "%OPERATION_RESULT_TYPE_FULL_QUALIFIED%");
          // <%%% START OUT_PARAMS_NO_STRIP %%%>
        var v%PARAM_NAME% := msg.Read('%PARAM_NAME%', "%PARAM_TYPE%");
          // <%%% END OUT_PARAMS_NO_STRIP %%%>
        aCallback(vResult
          // <%%% START OUT_PARAMS_NO_STRIP %%%>
                  , v%PARAM_NAME%
          // <%%% END OUT_PARAMS_NO_STRIP %%%>
          );
      end);
end;
// <%%% END IF_FUNCTION %%%>
// <%%% START IF_PROCEDURE_NOPARAMS %%%>

procedure T%SERVICE_NAME%_Proxy.%OPERATION_NAME%;
// <%%% END IF_PROCEDURE_NOPARAMS %%%>
// <%%% START IF_PROCEDURE_PARAMS %%%>

procedure T%SERVICE_NAME%_Proxy.%OPERATION_NAME%(
            // <%%% START IN_PARAMS %%%>
            %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%;
            // <%%% END IN_PARAMS %%%>
            );
// <%%% END IF_PROCEDURE_PARAMS %%%>
// <%%% START IF_PROCEDURE %%%>
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;             
begin
  lMessage := __GetMessage.Clone;  
  lTransportChannel := __GetTransportChannel;
  // <%%% START OUT_PARAMS_NO_STRIP %%%>
  // <%%% START IF_PARAM_TYPE_COMPLEX %%%>
  %PARAM_NAME% := nil;
  // <%%% END IF_PARAM_TYPE_COMPLEX %%%>
  // <%%% END OUT_PARAMS_NO_STRIP %%%>
  lMessage.InitializeRequestMessage(lTransportChannel, '%LIBRARY_NAME%', __GetInterfaceName, '%OPERATION_NAME%');
  // <%%% START IN_PARAMS_NO_STRIP %%%>
  lMessage.Write('%PARAM_NAME%', "%PARAM_TYPE_FULL_QUALIFIED%", %PARAM_NAME%);
  // <%%% END IN_PARAMS_NO_STRIP %%%>
  lMessage.Finalize;

  lTransportChannel.Dispatch(lMessage,
      procedure(resultmsg: Variant)
      begin
        var msg := TMessage.Create;  //create message reader as wrapper
        msg.fROMessage := resultmsg;
          // <%%% START OUT_PARAMS_NO_STRIP %%%>
        var v%PARAM_NAME% := msg.Read('%PARAM_NAME%', "%PARAM_TYPE%");
          // <%%% END OUT_PARAMS_NO_STRIP %%%>
        aCallback(
          // <%%% START OUT_PARAMS %%%>
                  v%PARAM_NAME%,
          // <%%% END OUT_PARAMS %%%>
          );
      end);
end;
// <%%% END IF_PROCEDURE %%%>
// <%%% END OPERATIONS %%%>
// <%%% END SERVICES %%%>
// <%%% START EVENT_SINKS %%%>

type
  { T%EVENT_SINK_NAME%_Writer }
  T%EVENT_SINK_NAME%_Writer = class(T%EVENT_SINK_WRITER_ANCESTOR_NAME%, I%EVENT_SINK_NAME%_Writer)
  protected
    // <%%% START OPERATIONS %%%>
    procedure %OPERATION_NAME%(const  __Sender : TGUID
                // <%%% START PARAMS %%%>
                ; %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%
                // <%%% END PARAMS %%%>
                );
    // <%%% END OPERATIONS %%%>
  end;
// <%%% START OPERATIONS %%%>

procedure T%EVENT_SINK_NAME%_Writer.%OPERATION_NAME%(const __Sender : TGUID
  // <%%% START PARAMS %%%>
  ; %PARAM_FRONT_MODIFIER% %PARAM_NAME%: %PARAM_TYPE%
  // <%%% END PARAMS %%%>
  );
var 
  __eventdata : Binary;
  lMessage : IROMessage;  
begin
  __eventdata := Binary.Create;
  lMessage := __Message;  
  try
    lMessage.InitializeEventMessage(NIL, '%LIBRARY_NAME%', EID_%EVENT_SINK_NAME%, '%OPERATION_NAME%');
    // <%%% START PARAMS_NO_STRIP %%%>
    lMessage.Write('%PARAM_NAME%', TypeInfo(%PARAM_TYPE_FULL_QUALIFIED%), %PARAM_NAME%, [%PARAM_ATTRIBUTE%]);
    // <%%% END PARAMS_NO_STRIP %%%>
    lMessage.Finalize;

    lMessage.WriteToStream(__eventdata);

    Repository.StoreEventData(__Sender, __eventdata, ExcludeSender, ExcludeSessionList, SessionList.CommaText, EID_%EVENT_SINK_NAME%);
  finally
    __eventdata.Free;
    lMessage := nil;    
  end;
end;
// <%%% END OPERATIONS %%%>

type
  { T%EVENT_SINK_NAME%_Invoker }
  T%EVENT_SINK_NAME%_Invoker = class(T%EVENT_SINK_INVOKER_ANCESTOR_NAME%)
  published
    // <%%% START OPERATIONS %%%>
    procedure Invoke_%OPERATION_NAME%(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
    // <%%% END OPERATIONS %%%>
  end;
// <%%% START OPERATIONS %%%>

procedure T%EVENT_SINK_NAME%_Invoker.Invoke_%OPERATION_NAME%(__EventReceiver : TROEventReceiver; const __Message : IROMessage; const __Target : IUnknown);
var
  // <%%% START PARAMS_NO_STRIP %%%>
  %PARAM_NAME%: %PARAM_TYPE_FULL_QUALIFIED%;
  // <%%% END PARAMS_NO_STRIP %%%>
  // <%%% START IF_HAS_COMPLEX_TYPE %%%>
  __lObjectDisposer: TROObjectDisposer;
  // <%%% END IF_HAS_COMPLEX_TYPE %%%>
  __%EVENT_SINK_NAME%Instance: I%EVENT_SINK_NAME%;
begin
  // <%%% START PARAMS_NO_STRIP %%%>
  // <%%% START IF_PARAM_TYPE_COMPLEX %%%>
  %PARAM_NAME% := nil;
  // <%%% END IF_PARAM_TYPE_COMPLEX %%%>
  // <%%% END PARAMS_NO_STRIP %%%>
  try
    // <%%% START PARAMS_NO_STRIP %%%>
    __Message.Read('%PARAM_NAME%', TypeInfo(%PARAM_TYPE_FULL_QUALIFIED%), %PARAM_NAME%, [%PARAM_ATTRIBUTE%]);
    // <%%% END PARAMS_NO_STRIP %%%>

    __%EVENT_SINK_NAME%Instance := (__Target as I%EVENT_SINK_NAME%);
    __%EVENT_SINK_NAME%Instance.%OPERATION_NAME%(
                                  // <%%% START PARAMS %%%>
                                  %PARAM_NAME%,
                                  // <%%% END PARAMS %%%>
                                  );

  finally
    // <%%% START IF_HAS_COMPLEX_TYPE %%%>
    __lObjectDisposer := TROObjectDisposer.Create(__EventReceiver);
    try
      // <%%% START PARAMS_NO_STRIP %%%>
      // <%%% START IF_PARAM_TYPE_COMPLEX %%%>
      __lObjectDisposer.Add(%PARAM_NAME%);
      // <%%% END IF_PARAM_TYPE_COMPLEX %%%>
      // <%%% END PARAMS_NO_STRIP %%%>
    finally
      __lObjectDisposer.Free();
    end;
    // <%%% END IF_HAS_COMPLEX_TYPE %%%>
  end;
end;
// <%%% END OPERATIONS %%%>
// <%%% END EVENT_SINKS %%%>

procedure TMessage.InitializeRequestMessage(aTransport: IROTransport; aLibraryName, anInterfaceName, aMessageName : string);
begin
  fROMessage.initialize(anInterfaceName, aMessageName);
end;

procedure TMessage.Write(aName: string; aTypeInfo: string; aValue: variant);
begin
  if aTypeInfo = 'DateTime' then
  begin
    //todo: DatetimeToISO8601
    fROMessage.write(aName, aTypeInfo, "2012-05-15T22:00:00Z");
  end
// <%%% START ENUMS %%%>
  else if aTypeInfo = '%LIBRARY_NAME%.%ENUM_NAME%' then
  begin
    fROMessage.write(aName, aTypeInfo, %LIBRARY_NAME%_%ENUM_NAME%[aValue]); //get string value by index
  end
// <%%% END ENUMS %%%>
  else
    fROMessage.write(aName, aTypeInfo, aValue);
end;

function TMessage.Read(aName: string; aTypeInfo: string): Variant;
begin
  if aTypeInfo = 'DateTime' then
  begin
    Result := fROMessage.read(aName, aTypeInfo);
  end
// <%%% START ENUMS %%%>
  else if aTypeInfo = '%LIBRARY_NAME%.%ENUM_NAME%' then
  begin
    Result := fROMessage.read(aName, aTypeInfo);
    //get index of string value
    var i: Integer;
    for i := 0 to %LIBRARY_NAME%_%ENUM_NAME%.length() do
    begin
      if %LIBRARY_NAME%_%ENUM_NAME%[i] = Result then
      begin
        Result := i;
        Break;
      end;
    end;
  end
// <%%% END ENUMS %%%>
  else
    Result := fROMessage.read(aName, aTypeInfo);
end;

procedure TMessage.Finalize;
begin
  fROMessage.finalize();
end;

procedure TMessage.UnsetAttributes(aTransport: IROTransport);
begin
  //
end;

procedure TMessage.FreeStream;
begin
  //
end;

function TMessage.Clone: IROMessage;
begin
  Result := TMessage.Create;
  (Result as TMessage).fROMessage := fROMessage.clone();
end;

constructor TJSONMessage.Create();
var
  msg: Variant;
begin
  asm
    @msg = new RemObjects.SDK.JSONMessage();
  end;
  fROMessage := msg;
end;

procedure TChannel.Dispatch(aMessage: IROMessage; aCallback: TDispatchResult);
var
  msg: Variant;
begin
  msg := (aMessage as TMessage).fROMessage;  
  fROChannel.dispatch(msg, @aCallback,
    procedure(aMessage, aError: Variant)
    begin
      var sMsg: string;
      asm
        @sMsg = JSON.stringify(@aMessage);
      end;
      w3_ShowMessage('Error: ' + aError.toString() + #13 + 'Message: ' + sMsg);
    end);
end;

constructor THTTPChannel.Create(aURL: string);
var
  ch: variant;
begin
  asm
    @ch = new RemObjects.SDK.HTTPClientChannel(@aURL);
  end;
  fROChannel := ch;
end;

function TROProxy.__GetMessage: IROMessage; 
begin
  Result := FMessage;
end;

function TROProxy.__GetTransportChannel: IROTransportChannel;   
begin
  Result := FTransportChannel;
end;

constructor TROProxy.Create(aMessage: IROMessage; aTransportChannel: IROTransportChannel);
var
  ch, msg, sid: Variant;
begin
  FMessage          := aMessage;
  FTransportChannel := aTransportChannel;

  ch  := (aTransportChannel as TChannel).fROChannel;
  msg := (aMessage as TMessage).fROMessage;
  sid := __GetInterfaceName;
  asm
    //init this object
    RemObjects.SDK.ROService.call(this, @ch, @msg, @sid);
  end
end;

end.