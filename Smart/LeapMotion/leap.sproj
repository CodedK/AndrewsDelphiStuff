<SMART>
  <project version="2" subversion="0" type="visual">
    <name>leap</name>
    <author></author>
    <company></company>
    <keywords></keywords>
    <description></description>
    <version>
      <major>0</major>
      <minor>0</minor>
      <revision>0</revision>
    </version>
    <options>
      <use_obfuscation>0</use_obfuscation>
      <use_codepacking>0</use_codepacking>
      <use_rangechecking>1</use_rangechecking>
      <use_instancechecking>1</use_instancechecking>
      <use_conditionchecking>1</use_conditionchecking>
      <use_loopchecking>1</use_loopchecking>
      <use_noinlinemagics>0</use_noinlinemagics>
      <use_nosourcelocation>0</use_nosourcelocation>
      <use_nortti>0</use_nortti>
      <use_smartlinking>1</use_smartlinking>
      <use_sourcemap>0</use_sourcemap>
      <use_compresscss>0</use_compresscss>
      <use_assertions>0</use_assertions>
      <use_optimize>0</use_optimize>
      <use_closures>0</use_closures>
      <use_devirtualize>1</use_devirtualize>
      <use_generate_manifest>1</use_generate_manifest>
      <use_serve_manifest>0</use_serve_manifest>
      <use_server>1</use_server>
      <pause_after_execution>0</pause_after_execution>
      <use_css_external>0</use_css_external>
      <use_verbosity>1</use_verbosity>
      <use_css_theme>iOS.css</use_css_theme>
      <use_ro_rodl></use_ro_rodl>
      <use_hints_level>1</use_hints_level>
      <use_main_body>1</use_main_body>
      <javascript_only>0</javascript_only>
      <use_custom_template>0</use_custom_template>
      <use_custom_theme>0</use_custom_theme>
      <output_name>index.html</output_name>
      <execute_type>0</execute_type>
      <executeable_name></executeable_name>
      <executeable_params></executeable_params>
      <use_pre-build_script>0</use_pre-build_script>
      <pre-build_script></pre-build_script>
      <use_pre-link_script>0</use_pre-link_script>
      <pre-link_script></pre-link_script>
      <use_post-build_script>0</use_post-build_script>
      <post-build_script></post-build_script>
      <conditional_defines></conditional_defines>
      <handle_exceptions>0</handle_exceptions>
      <auto_refresh>0</auto_refresh>
    </options>
    <globals />
    <files>
      <file type="unit">
        <name>leap</name>
        <created>2014-04-23T13:05:23.300Z</created>
        <source>
          <![CDATA[unit leap;

interface

uses 
  W3System, W3Components, W3Forms, W3Application, Form1;

type
  TApplication = class(TW3CustomApplication)
  private
    FForm1: TForm1;
  protected
    procedure ApplicationStarting; override;
  end;

implementation

{ TApplication}

procedure TApplication.ApplicationStarting;
begin
  FForm1 := TForm1.Create(Display.View);
  FForm1.Name := 'Form1';
  RegisterFormInstance(FForm1, True);
  // register other forms here

  inherited;
end;


end.
]]>
        </source>
      </file>
      <file type="main">
        <name>leapApplication</name>
        <created>2014-04-23T13:05:23.300Z</created>
        <source>
          <![CDATA[uses leap;

{$IFDEF SMART_INTERNAL_HANDLE_EXCEPTIONS}
uses W3System;
{$ENDIF}

{$IFDEF SMART_INTERNAL_AUTO_REFRESH}
uses W3AutoRefresh;
TW3AutoRefresh.Create.Start;
{$ENDIF}

var Application: TApplication;

{$IFDEF SMART_INTERNAL_HANDLE_EXCEPTIONS}
try
{$ENDIF}

  Application := TApplication.Create;
  Application.RunApp;

{$IFDEF SMART_INTERNAL_HANDLE_EXCEPTIONS}
except
  on e: Exception do
    ShowMessage(e.Message);
end;
{$ENDIF}
]]>
        </source>
      </file>
      <file type="form">
        <name>Form1</name>
        <created>2014-04-23T13:05:23.300Z</created>
        <source>
          <![CDATA[unit Form1;

interface

uses 
  W3System, W3Graphics, W3Components, W3Forms, W3Fonts, W3Borders, W3Application;

type
  TForm1=class(TW3form)
  private
    {$I 'Form1:intf'}
  protected
    procedure InitializeForm; override;
    procedure InitializeObject; override;
    procedure Resize; override;
  end;

implementation

uses
  leap.core;

{ TForm1}

procedure TForm1.InitializeForm;
begin
  inherited;
  // this is a good place to initialize components
end;


procedure TForm1.InitializeObject;
begin
  inherited;
  {$I 'Form1:impl'}

  WriteLn('Creating controller...');

  var j = new JController;
  j.addEventListener(LEAPMOTION_CONNECTED,
    procedure(event: JLeapEvent)
    begin
      WriteLn('Leap Controller connected!');

      j.enableGesture(TYPE_CIRCLE, true);
      j.enableGesture(TYPE_SWIPE,true);
      j.enableGesture(TYPE_SCREEN_TAP, true);
      j.enableGesture(TYPE_KEY_TAP, true);
    end);

  j.addEventListener(LEAPMOTION_FRAME,
    procedure(event: JLeapEvent)
    begin
      var frame := event.frame;
      WriteLn("Frame id:" + frame.id.tostring + ", timestamp:" + frame.timestamp.tostring +
              ", hands:" + frame.hands.length.tostring + ", fingers:" + frame.fingers.length.tostring +
              ", tools:" + frame.tools.length.tostring + ", gestures:" + frame.gestures(nil).length.tostring);
    end);

  WriteLn('Leap Controller created');
end;
 
procedure TForm1.Resize;
begin
  inherited;
end;
 
end.


(*

var controller:Leap.Controller = new Leap.Controller();
controller.addEventListener(Leap.LeapEvent.LEAPMOTION_CONNECTED, (event:Leap.LeapEvent) => {
    controller.enableGesture(Leap.Type.TYPE_CIRCLE, true);
    controller.enableGesture(Leap.Type.TYPE_SWIPE, true);
    controller.enableGesture(Leap.Type.TYPE_SCREEN_TAP, true);
    controller.enableGesture(Leap.Type.TYPE_KEY_TAP, true);
});
controller.addEventListener(Leap.LeapEvent.LEAPMOTION_FRAME, (event:Leap.LeapEvent) => {
*)

(*
controller.addEventListener(Leap.LeapEvent.LEAPMOTION_CONNECTED, (event:Leap.LeapEvent) => {
    controller.enableGesture(Leap.Type.TYPE_CIRCLE, true);
    controller.enableGesture(Leap.Type.TYPE_SWIPE, true);
    controller.enableGesture(Leap.Type.TYPE_SCREEN_TAP, true);
    controller.enableGesture(Leap.Type.TYPE_KEY_TAP, true);
});
controller.addEventListener(Leap.LeapEvent.LEAPMOTION_FRAME, (event:Leap.LeapEvent) => {
    var frame:Leap.Frame = event.frame;
    console.log("Frame id:" + frame.id + ", timestamp:" + frame.timestamp + ", hands:" + frame.hands.length + ", fingers:" + frame.fingers.length + ", tools:" + frame.tools.length + ", gestures:" + frame.gestures().length);

    if (frame.hands.length > 0) {
        // Get the first hand
        var hand:Leap.Hand = frame.hands[0];

        // Check if the hand has any fingers
        var fingers:Leap.Finger[] = hand.fingers;
        if (fingers.length > 0) {
            // Calculate the hand's average finger tip position
            var avgPos:Leap.Vector3 = Leap.Vector3.zero();
            for (var i:number = 0; i <fingers.length; i++)
                avgPos = avgPos.plus(( <Leap.Finger>fingers[i]).tipPosition);

            avgPos = avgPos.divide(fingers.length);
            console.log("Hand has " + fingers.length + " fingers, average finger tip position:" + avgPos);
        }

        // Get the hand's sphere radius and palm position
        console.log("Hand sphere radius:" + hand.sphereRadius + " mm, palm position:" + hand.palmPosition);

        // Get the hand's normal vector and direction
        var normal:Leap.Vector3 = hand.palmNormal;
        var direction:Leap.Vector3 = hand.direction;

        // Calculate the hand's pitch, roll, and yaw angles
        console.log("Hand pitch:" + Leap.LeapUtil.toDegrees(direction.pitch) + " degrees, " + "roll:" + Leap.LeapUtil.toDegrees(normal.roll) + " degrees, " + "yaw:" + Leap.LeapUtil.toDegrees(direction.yaw) + " degrees\n");
    }

    var gestures:Leap.Gesture[] = frame.gestures();
    for (var i:number = 0; i <gestures.length; i++) {
        var gesture:Leap.Gesture = gestures[i];

        switch (gesture.type) {
            case Leap.Type.TYPE_CIRCLE:
                var circle:Leap.CircleGesture = <Leap.CircleGesture>gesture;

                // Calculate clock direction using the angle between circle normal and pointable
                var clockwiseness:string;
                if (circle.pointable.direction.angleTo(circle.normal) <= Math.PI / 4) {
                    // Clockwise if angle is less than 90 degrees
                    clockwiseness = "clockwise";
                } else {
                    clockwiseness = "counterclockwise";
                }

                // Calculate angle swept since last frame
                var sweptAngle:number = 0;
                if (circle.state != Leap.State.STATE_START) {
                    var previousGesture:Leap.Gesture = controller.frame(1).gesture(circle.id);
                    if (previousGesture.isValid()) {
                        var previousUpdate:Leap.CircleGesture = ( <Leap.CircleGesture>controller.frame(1).gesture(circle.id));
                        sweptAngle = (circle.progress - previousUpdate.progress) * 2 * Math.PI;
                    }
                }
                console.log("Circle id:" + circle.id + ", " + circle.state + ", progress:" + circle.progress + ", radius:" + circle.radius + ", angle:" + Leap.LeapUtil.toDegrees(sweptAngle) + ", " + clockwiseness);
                break;
            case Leap.Type.TYPE_SWIPE:
                var swipe:Leap.SwipeGesture = <Leap.SwipeGesture>gesture;
                console.log("Swipe id:" + swipe.id + ", " + swipe.state + ", position:" + swipe.position + ", direction:" + swipe.direction + ", speed:" + swipe.speed);
                break;
            case Leap.Type.TYPE_SCREEN_TAP:
                var screenTap:Leap.ScreenTapGesture = <Leap.ScreenTapGesture>gesture;
                console.log("Screen Tap id:" + screenTap.id + ", " + screenTap.state + ", position:" + screenTap.position + ", direction:" + screenTap.direction);
                break;
            case Leap.Type.TYPE_KEY_TAP:
                var keyTap:Leap.KeyTapGesture = <Leap.KeyTapGesture>gesture;
                console.log("Key Tap id:" + keyTap.id + ", " + keyTap.state + ", position:" + keyTap.position + ", direction:" + keyTap.direction);
                break;
        }
    }
});
*)
]]>
        </source>
        <design>
          <![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<SmartForm>
  <Created>2014-04-23T13:05:23.385</Created>
  <Modified>2014-06-04T14:11:26.082</Modified>
  <object type="TW3Form">
    <Caption>W3Form</Caption>
    <Name>Form1</Name>
  </object>
</SmartForm>]]>
        </design>
      </file>
      <file type="unit">
        <name>leap.Core</name>
        <created>2014-04-23T13:06:32.477Z</created>
        <filename>leap.Core.pas</filename>
      </file>
    </files>
  </project>
</SMART>